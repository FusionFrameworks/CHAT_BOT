{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const [paymentAmount, setPaymentAmount] = useState(\"\");\n//     const [storedSymptoms, setStoredSymptoms] = useState(\"\");\n//     const [consultationFee, setConsultationFee] = useState(null);\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim() === \"\") {\n//             alert(\"Please enter your symptoms before sending.\");\n//             return;\n//         }\n\n//         setResponses((prevResponses) => [\n//             ...prevResponses, \n//             { text: `You said: ${userInput}`, sender: \"user\" }\n//         ]);\n//         setStoredSymptoms(userInput);\n\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({ symptoms: userInput }),\n//             });\n\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! status: ${response.status}`);\n//             }\n\n//             const data = await response.json();\n//             setResponses((prevResponses) => [\n//                 ...prevResponses, \n//                 { text: data.message || \"No response from server.\", sender: \"bot\" }\n//             ]);\n\n//             const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\n//             if (feeMatch) {\n//                 setConsultationFee(parseFloat(feeMatch[0]));\n//             }\n//         } catch (error) {\n//             setResponses((prevResponses) => [\n//                 ...prevResponses, \n//                 { text: `Error: ${error.message || \"Unable to reach the backend.\"}`, sender: \"bot\" }\n//             ]);\n//         }\n\n//         setUserInput(\"\");\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         setPaymentAmount(\"\");\n//         setStoredSymptoms(\"\");\n//         setConsultationFee(null);\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\n//     };\n\n//     const handlePayment = async () => {\n//         const amount = parseFloat(paymentAmount);\n\n//         if (isNaN(amount) || amount <= 0) {\n//             alert(\"Please enter a valid positive amount.\");\n//             return;\n//         }\n\n//         if (consultationFee === null || amount !== consultationFee) {\n//             alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\n//             return;\n//         }\n\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\",\n//             amount: amount * 100,\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: async function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     { text: `Payment successful! Payment ID: ${response.razorpay_payment_id}`, sender: \"bot\" },\n//                 ]);\n\n//                 try {\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                         method: \"POST\",\n//                         headers: {\n//                             \"Content-Type\": \"application/json\",\n//                         },\n//                         body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true }),\n//                     });\n\n//                     if (!doctorResponse.ok) {\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\n//                     }\n\n//                     const doctorData = await doctorResponse.json();\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         { text: doctorData.message || \"No response from doctor suggestion.\", sender: \"bot\" },\n//                     ]);\n//                 } catch (error) {\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         { text: `Error fetching doctor suggestions: ${error.message}`, sender: \"bot\" },\n//                     ]);\n//                 }\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//                 __prefill_vpa: \"success@razorpay\",\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//             method: {\n//                 upi: true,\n//                 card: true,\n//                 netbanking: true,\n//                 wallet: true,\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     const handlePaymentChange = (e) => {\n//         const value = e.target.value;\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n//             setPaymentAmount(value);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <div\n//                             key={index}\n//                             className={`flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\n//                         >\n//                             <div\n//                                 className={`p-3 rounded-2xl max-w-xs shadow-lg ${\n//                                     response.sender === \"user\"\n//                                         ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\"\n//                                         : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"\n//                                 }`}\n//                                 style={{ animationDelay: `${index * 0.1}s` }}\n//                             >\n//                                 {response.text}\n//                             </div>\n//                         </div>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 <div className=\"mt-4\">\n//                     <h3 className=\"text-lg font-semibold text-gray-800\">ðŸ’³ Make a Payment</h3>\n//                     <input\n//                         type=\"text\"\n//                         value={paymentAmount}\n//                         onChange={handlePaymentChange}\n//                         placeholder=\"Enter consultation fee\"\n//                         className=\"border border-gray-300 rounded-lg p-2 w-full mt-2 focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handlePayment}\n//                         className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Pay Now\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;","map":{"version":3,"names":[],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const [paymentAmount, setPaymentAmount] = useState(\"\");\r\n//     const [storedSymptoms, setStoredSymptoms] = useState(\"\");\r\n//     const [consultationFee, setConsultationFee] = useState(null);\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\r\n        \r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim() === \"\") {\r\n//             alert(\"Please enter your symptoms before sending.\");\r\n//             return;\r\n//         }\r\n\r\n//         setResponses((prevResponses) => [\r\n//             ...prevResponses, \r\n//             { text: `You said: ${userInput}`, sender: \"user\" }\r\n//         ]);\r\n//         setStoredSymptoms(userInput);\r\n\r\n//         try {\r\n//             const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify({ symptoms: userInput }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 throw new Error(`HTTP error! status: ${response.status}`);\r\n//             }\r\n\r\n//             const data = await response.json();\r\n//             setResponses((prevResponses) => [\r\n//                 ...prevResponses, \r\n//                 { text: data.message || \"No response from server.\", sender: \"bot\" }\r\n//             ]);\r\n\r\n//             const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\r\n//             if (feeMatch) {\r\n//                 setConsultationFee(parseFloat(feeMatch[0]));\r\n//             }\r\n//         } catch (error) {\r\n//             setResponses((prevResponses) => [\r\n//                 ...prevResponses, \r\n//                 { text: `Error: ${error.message || \"Unable to reach the backend.\"}`, sender: \"bot\" }\r\n//             ]);\r\n//         }\r\n\r\n//         setUserInput(\"\");\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         setPaymentAmount(\"\");\r\n//         setStoredSymptoms(\"\");\r\n//         setConsultationFee(null);\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const amount = parseFloat(paymentAmount);\r\n\r\n//         if (isNaN(amount) || amount <= 0) {\r\n//             alert(\"Please enter a valid positive amount.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (consultationFee === null || amount !== consultationFee) {\r\n//             alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\r\n//             return;\r\n//         }\r\n\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\",\r\n//             amount: amount * 100,\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: async function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     { text: `Payment successful! Payment ID: ${response.razorpay_payment_id}`, sender: \"bot\" },\r\n//                 ]);\r\n\r\n//                 try {\r\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                         method: \"POST\",\r\n//                         headers: {\r\n//                             \"Content-Type\": \"application/json\",\r\n//                         },\r\n//                         body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true }),\r\n//                     });\r\n\r\n//                     if (!doctorResponse.ok) {\r\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n//                     }\r\n\r\n//                     const doctorData = await doctorResponse.json();\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         { text: doctorData.message || \"No response from doctor suggestion.\", sender: \"bot\" },\r\n//                     ]);\r\n//                 } catch (error) {\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         { text: `Error fetching doctor suggestions: ${error.message}`, sender: \"bot\" },\r\n//                     ]);\r\n//                 }\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//                 __prefill_vpa: \"success@razorpay\",\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//             method: {\r\n//                 upi: true,\r\n//                 card: true,\r\n//                 netbanking: true,\r\n//                 wallet: true,\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     const handlePaymentChange = (e) => {\r\n//         const value = e.target.value;\r\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n//             setPaymentAmount(value);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <div\r\n//                             key={index}\r\n//                             className={`flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\r\n//                         >\r\n//                             <div\r\n//                                 className={`p-3 rounded-2xl max-w-xs shadow-lg ${\r\n//                                     response.sender === \"user\"\r\n//                                         ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\"\r\n//                                         : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"\r\n//                                 }`}\r\n//                                 style={{ animationDelay: `${index * 0.1}s` }}\r\n//                             >\r\n//                                 {response.text}\r\n//                             </div>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 <div className=\"mt-4\">\r\n//                     <h3 className=\"text-lg font-semibold text-gray-800\">ðŸ’³ Make a Payment</h3>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         value={paymentAmount}\r\n//                         onChange={handlePaymentChange}\r\n//                         placeholder=\"Enter consultation fee\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 w-full mt-2 focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handlePayment}\r\n//                         className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Pay Now\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}