{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const chatboxRef = useRef();\n  useEffect(() => {\n    // Welcoming message\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n\n    // Auto-focus on the input field when the component mounts\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n  }, []);\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (userInput.trim()) {\n      setResponses(prevResponses => [...prevResponses, `You said: ${userInput}`]);\n      try {\n        const response = await fetch(\"http://localhost:5000/suggest_doctor\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            symptoms: userInput\n          })\n        });\n        const data = await response.json();\n        setResponses(prevResponses => [...prevResponses, data.message]);\n      } catch (error) {\n        console.error(\"Error:\", error);\n        setResponses(prevResponses => [...prevResponses, \"Error: Unable to reach the backend.\"]);\n      }\n      setUserInput(\"\"); // Clear input after sending\n    }\n  };\n  const handleClearChat = () => {\n    setResponses([]);\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg border border-gray-200 mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-center mb-4\",\n      children: \"\\uD83E\\uDD16 Health Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox border border-gray-300 p-4 h-64 overflow-y-auto rounded-lg bg-gray-50 shadow-inner\",\n      ref: chatboxRef,\n      children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-2 text-gray-800\",\n        children: response\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-input\",\n        type: \"text\",\n        value: userInput,\n        onChange: handleUserInput,\n        placeholder: \"Type your symptoms...\",\n        className: \"border border-gray-300 rounded-l-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"bg-blue-600 text-white rounded-r-lg p-2 hover:bg-blue-700 transition duration-300\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClearChat,\n      className: \"bg-red-600 text-white rounded p-2 mt-2 w-full hover:bg-red-700 transition duration-300\",\n      children: \"Clear Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"S4H8oJ7hkz6Vf9ydGhpGU6l8+IQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","responses","setResponses","chatboxRef","welcomeMessage","inputField","document","getElementById","focus","handleUserInput","e","target","value","handleSend","trim","prevResponses","response","fetch","method","headers","body","JSON","stringify","symptoms","data","json","message","error","console","handleClearChat","current","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","id","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Chatbot = () => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const chatboxRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // Welcoming message\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n\r\n        // Auto-focus on the input field when the component mounts\r\n        const inputField = document.getElementById(\"user-input\");\r\n        if (inputField) {\r\n            inputField.focus();\r\n        }\r\n    }, []);\r\n\r\n    const handleUserInput = (e) => {\r\n        setUserInput(e.target.value);\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (userInput.trim()) {\r\n            setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n            try {\r\n                const response = await fetch(\"http://localhost:5000/suggest_doctor\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ symptoms: userInput }),\r\n                });\r\n\r\n                const data = await response.json();\r\n                setResponses((prevResponses) => [...prevResponses, data.message]);\r\n            } catch (error) {\r\n                console.error(\"Error:\", error);\r\n                setResponses((prevResponses) => [...prevResponses, \"Error: Unable to reach the backend.\"]);\r\n            }\r\n\r\n            setUserInput(\"\"); // Clear input after sending\r\n        }\r\n    };\r\n\r\n    const handleClearChat = () => {\r\n        setResponses([]);\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (chatboxRef.current) {\r\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n        }\r\n    }, [responses]);\r\n\r\n    return (\r\n        <div className=\"chatbot-container max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg border border-gray-200 mt-10\">\r\n            <h2 className=\"text-2xl font-semibold text-center mb-4\">ðŸ¤– Health Chatbot</h2>\r\n            <div className=\"chatbox border border-gray-300 p-4 h-64 overflow-y-auto rounded-lg bg-gray-50 shadow-inner\" ref={chatboxRef}>\r\n                {responses.map((response, index) => (\r\n                    <p key={index} className=\"mb-2 text-gray-800\">\r\n                        {response}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <div className=\"flex mt-4\">\r\n                <input\r\n                    id=\"user-input\"\r\n                    type=\"text\"\r\n                    value={userInput}\r\n                    onChange={handleUserInput}\r\n                    placeholder=\"Type your symptoms...\"\r\n                    className=\"border border-gray-300 rounded-l-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300\"\r\n                />\r\n                <button\r\n                    onClick={handleSend}\r\n                    className=\"bg-blue-600 text-white rounded-r-lg p-2 hover:bg-blue-700 transition duration-300\"\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n            <button onClick={handleClearChat} className=\"bg-red-600 text-white rounded p-2 mt-2 w-full hover:bg-red-700 transition duration-300\">\r\n                Clear Chat\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}