{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\LabTest.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// const labTests = [\n//   { name: \"Blood Test\", price: \"₹740\", guidelines: \"Avoid eating or drinking anything except water for at least 8 hours before the test.\" },\n//   // ... other test data\n// ];\n\n// const LabTests = () => {\n//   const [selectedTest, setSelectedTest] = useState(null);\n//   const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\n//   const [isPaymentProcessing, setIsPaymentProcessing] = useState(false); // Loading state\n//   const [successMessage, setSuccessMessage] = useState(\"\"); // New state for success message\n\n//   // Load Razorpay Script Dynamically\n//   useEffect(() => {\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//     script.async = true;\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script);\n//     };\n//   }, []);\n\n//   const handleSelectTest = (test) => {\n//     setSelectedTest(test);\n//     setIsPaymentSuccess(false); // Reset payment success status on test selection\n//     setSuccessMessage(\"\"); // Reset success message\n//   };\n\n//   const handlePaymentSuccess = () => {\n//     setIsPaymentSuccess(true);\n//     setIsPaymentProcessing(false); // Stop loading indicator\n//     setSuccessMessage(\"Payment successful! You can now view the test guidelines.\");\n\n//     // Twilio Notification API call\n//     fetch(\"http://localhost:5000/send-notification\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         phone: \"+918804339456\", // Replace with dynamic user's phone number\n//         message: \"Your payment was successful! You can now view the test guidelines.\",\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         if (data.success) {\n//           console.log(\"Notification sent successfully.\");\n//         } else {\n//           console.error(\"Failed to send notification:\", data.error);\n//         }\n//       })\n//       .catch((error) => console.error(\"Error sending notification:\", error));\n//   };\n\n//   const handlePaymentFailure = () => {\n//     setIsPaymentProcessing(false); // Stop loading indicator\n//     alert(\"Payment failed or was canceled. Please try again.\");\n//   };\n\n//   const initiatePayment = (test) => {\n//     if (window.Razorpay) {\n//       setIsPaymentProcessing(true); // Start loading indicator\n//       const options = {\n//         key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay key\n//         amount: parseFloat(test.price.replace(\"₹\", \"\")) * 100, // Convert to paise\n//         currency: \"INR\",\n//         name: \"Health App\",\n//         description: \"Lab Test Payment\",\n//         handler: (response) => {\n//           if (response.razorpay_payment_id) {\n//             handlePaymentSuccess();\n//           }\n//         },\n//         prefill: {\n//           name: \"Test User\", // Replace with dynamic user name\n//           email: \"testuser@example.com\", // Replace with dynamic user email\n//           contact: \"+911234567890\", // Replace with dynamic user contact\n//         },\n//         notes: {\n//           address: \"Health App Office\",\n//         },\n//         theme: {\n//           color: \"#3399cc\",\n//         },\n//         modal: {\n//           ondismiss: handlePaymentFailure, // Handle payment modal close\n//         },\n//       };\n\n//       const razorpayInstance = new window.Razorpay(options);\n//       razorpayInstance.open();\n//     } else {\n//       console.error(\"Razorpay SDK failed to load.\");\n//       handlePaymentFailure();\n//     }\n//   };\n\n//   return (\n//     <div className=\"p-6 bg-light-gray rounded-lg shadow-2xl\">\n//       <h2 className=\"text-3xl font-semibold text-soft-blue mb-4\">Available Lab Tests</h2>\n//       <ul className=\"space-y-4\">\n//         {labTests.map((test, index) => (\n//           <li\n//             key={index}\n//             className={`border-b pb-4 ${selectedTest === test ? \"bg-blue-50 border-blue-500\" : \"\"}`}\n//           >\n//             <div className=\"flex justify-between items-center\">\n//               <div>\n//                 <h3 className=\"text-xl font-bold text-gray-800\">{test.name}</h3>\n//                 <p className=\"text-gray-600\">Price: {test.price}</p>\n//               </div>\n//               <button\n//                 className=\"bg-soft-blue text-white px-4 py-2 rounded-lg shadow-2xl transition duration-300 ease-in-out hover:scale-105 animate-button-pulse\"\n//                 onClick={() => handleSelectTest(test)}\n//               >\n//                 View Guidelines\n//               </button>\n//             </div>\n//             {selectedTest === test && !isPaymentSuccess && (\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Please make a payment to view guidelines:</h4>\n//                 <button\n//                   className={`mt-2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-2xl ${isPaymentProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\n//                   onClick={() => initiatePayment(test)}\n//                   disabled={isPaymentProcessing}\n//                 >\n//                   {isPaymentProcessing ? \"Processing...\" : \"Pay Now\"}\n//                 </button>\n//               </div>\n//             )}\n//             {selectedTest === test && isPaymentSuccess && (\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Guidelines:</h4>\n//                 <p className=\"text-gray-600\">{test.guidelines}</p>\n//               </div>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//       {successMessage && (\n//         <div className=\"mt-6 p-4 bg-green-100 text-green-700 rounded-lg shadow-md\">\n//           <p>{successMessage}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default LabTests;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst labTests = [{\n  name: \"Blood Test\",\n  price: \"₹740\",\n  guidelines: \"Avoid eating or drinking anything except water for at least 8 hours before the test.\"\n}\n// Add other test data here\n];\nconst LabTests = () => {\n  _s();\n  const [selectedTest, setSelectedTest] = useState(null);\n  const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\n  const [isPaymentProcessing, setIsPaymentProcessing] = useState(false); // Loading state\n  const [successMessage, setSuccessMessage] = useState(\"\"); // New state for success message\n\n  // Load Razorpay Script Dynamically\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n    script.async = true;\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n  const handleSelectTest = test => {\n    setSelectedTest(test);\n    setIsPaymentSuccess(false); // Reset payment success status on test selection\n    setSuccessMessage(\"\"); // Reset success message\n  };\n  const handlePaymentSuccess = () => {\n    setIsPaymentSuccess(true);\n    setIsPaymentProcessing(false); // Stop loading indicator\n    setSuccessMessage(\"Payment successful! You can now view the test guidelines.\");\n\n    // Call the Twilio Notification API\n    fetch(\"http://127.0.0.1:4000/send-notification\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        phone: \"+918804339456\",\n        // Replace with dynamic user's phone number\n        message: \"Your payment was successful! You can now view the test guidelines.\"\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        console.log(\"Notification sent successfully.\");\n      } else {\n        console.error(\"Failed to send notification:\", data.error);\n      }\n    }).catch(error => console.error(\"Error sending notification:\", error));\n  };\n  const handlePaymentFailure = () => {\n    setIsPaymentProcessing(false); // Stop loading indicator\n    alert(\"Payment failed or was canceled. Please try again.\");\n  };\n  const initiatePayment = test => {\n    if (window.Razorpay) {\n      setIsPaymentProcessing(true); // Start loading indicator\n      const options = {\n        key: \"rzp_test_lmkOFuIPmT2vi9\",\n        // Replace with your Razorpay key\n        amount: parseFloat(test.price.replace(\"₹\", \"\")) * 100,\n        // Convert to paise\n        currency: \"INR\",\n        name: \"Health App\",\n        description: \"Lab Test Payment\",\n        handler: response => {\n          if (response.razorpay_payment_id) {\n            handlePaymentSuccess();\n          }\n        },\n        prefill: {\n          name: \"Test User\",\n          // Replace with dynamic user name\n          email: \"testuser@example.com\",\n          // Replace with dynamic user email\n          contact: \"+911234567890\" // Replace with dynamic user contact\n        },\n        notes: {\n          address: \"Health App Office\"\n        },\n        theme: {\n          color: \"#3399cc\"\n        },\n        modal: {\n          ondismiss: handlePaymentFailure // Handle payment modal close\n        }\n      };\n      const razorpayInstance = new window.Razorpay(options);\n      razorpayInstance.open();\n    } else {\n      console.error(\"Razorpay SDK failed to load.\");\n      handlePaymentFailure();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-light-gray rounded-lg shadow-2xl\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-semibold text-soft-blue mb-4\",\n      children: \"Available Lab Tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-4\",\n      children: labTests.map((test, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `border-b pb-4 ${selectedTest === test ? \"bg-blue-50 border-blue-500\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-xl font-bold text-gray-800\",\n              children: test.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [\"Price: \", test.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-soft-blue text-white px-4 py-2 rounded-lg shadow-2xl transition duration-300 ease-in-out hover:scale-105 animate-button-pulse\",\n            onClick: () => handleSelectTest(test),\n            children: \"View Guidelines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this), selectedTest === test && !isPaymentSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2 p-4 border-t border-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-lg font-semibold text-gray-700\",\n            children: \"Please make a payment to view guidelines:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mt-2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-2xl ${isPaymentProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"}`,\n            onClick: () => initiatePayment(test),\n            disabled: isPaymentProcessing,\n            children: isPaymentProcessing ? \"Processing...\" : \"Pay Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this), selectedTest === test && isPaymentSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2 p-4 border-t border-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-lg font-semibold text-gray-700\",\n            children: \"Guidelines:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600\",\n            children: test.guidelines\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-green-100 text-green-700 rounded-lg shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(LabTests, \"PK+GWwJCW4399h14COFMkXgVvv8=\");\n_c = LabTests;\nexport default LabTests;\nvar _c;\n$RefreshReg$(_c, \"LabTests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","labTests","name","price","guidelines","LabTests","_s","selectedTest","setSelectedTest","isPaymentSuccess","setIsPaymentSuccess","isPaymentProcessing","setIsPaymentProcessing","successMessage","setSuccessMessage","script","document","createElement","src","async","body","appendChild","removeChild","handleSelectTest","test","handlePaymentSuccess","fetch","method","headers","JSON","stringify","phone","message","then","response","json","data","success","console","log","error","catch","handlePaymentFailure","alert","initiatePayment","window","Razorpay","options","key","amount","parseFloat","replace","currency","description","handler","razorpay_payment_id","prefill","email","contact","notes","address","theme","color","modal","ondismiss","razorpayInstance","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/LabTest.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// const labTests = [\r\n//   { name: \"Blood Test\", price: \"₹740\", guidelines: \"Avoid eating or drinking anything except water for at least 8 hours before the test.\" },\r\n//   // ... other test data\r\n// ];\r\n\r\n// const LabTests = () => {\r\n//   const [selectedTest, setSelectedTest] = useState(null);\r\n//   const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\r\n//   const [isPaymentProcessing, setIsPaymentProcessing] = useState(false); // Loading state\r\n//   const [successMessage, setSuccessMessage] = useState(\"\"); // New state for success message\r\n\r\n//   // Load Razorpay Script Dynamically\r\n//   useEffect(() => {\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//     script.async = true;\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script);\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSelectTest = (test) => {\r\n//     setSelectedTest(test);\r\n//     setIsPaymentSuccess(false); // Reset payment success status on test selection\r\n//     setSuccessMessage(\"\"); // Reset success message\r\n//   };\r\n\r\n//   const handlePaymentSuccess = () => {\r\n//     setIsPaymentSuccess(true);\r\n//     setIsPaymentProcessing(false); // Stop loading indicator\r\n//     setSuccessMessage(\"Payment successful! You can now view the test guidelines.\");\r\n\r\n//     // Twilio Notification API call\r\n//     fetch(\"http://localhost:5000/send-notification\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({\r\n//         phone: \"+918804339456\", // Replace with dynamic user's phone number\r\n//         message: \"Your payment was successful! You can now view the test guidelines.\",\r\n//       }),\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         if (data.success) {\r\n//           console.log(\"Notification sent successfully.\");\r\n//         } else {\r\n//           console.error(\"Failed to send notification:\", data.error);\r\n//         }\r\n//       })\r\n//       .catch((error) => console.error(\"Error sending notification:\", error));\r\n//   };\r\n\r\n//   const handlePaymentFailure = () => {\r\n//     setIsPaymentProcessing(false); // Stop loading indicator\r\n//     alert(\"Payment failed or was canceled. Please try again.\");\r\n//   };\r\n\r\n//   const initiatePayment = (test) => {\r\n//     if (window.Razorpay) {\r\n//       setIsPaymentProcessing(true); // Start loading indicator\r\n//       const options = {\r\n//         key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay key\r\n//         amount: parseFloat(test.price.replace(\"₹\", \"\")) * 100, // Convert to paise\r\n//         currency: \"INR\",\r\n//         name: \"Health App\",\r\n//         description: \"Lab Test Payment\",\r\n//         handler: (response) => {\r\n//           if (response.razorpay_payment_id) {\r\n//             handlePaymentSuccess();\r\n//           }\r\n//         },\r\n//         prefill: {\r\n//           name: \"Test User\", // Replace with dynamic user name\r\n//           email: \"testuser@example.com\", // Replace with dynamic user email\r\n//           contact: \"+911234567890\", // Replace with dynamic user contact\r\n//         },\r\n//         notes: {\r\n//           address: \"Health App Office\",\r\n//         },\r\n//         theme: {\r\n//           color: \"#3399cc\",\r\n//         },\r\n//         modal: {\r\n//           ondismiss: handlePaymentFailure, // Handle payment modal close\r\n//         },\r\n//       };\r\n\r\n//       const razorpayInstance = new window.Razorpay(options);\r\n//       razorpayInstance.open();\r\n//     } else {\r\n//       console.error(\"Razorpay SDK failed to load.\");\r\n//       handlePaymentFailure();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6 bg-light-gray rounded-lg shadow-2xl\">\r\n//       <h2 className=\"text-3xl font-semibold text-soft-blue mb-4\">Available Lab Tests</h2>\r\n//       <ul className=\"space-y-4\">\r\n//         {labTests.map((test, index) => (\r\n//           <li\r\n//             key={index}\r\n//             className={`border-b pb-4 ${selectedTest === test ? \"bg-blue-50 border-blue-500\" : \"\"}`}\r\n//           >\r\n//             <div className=\"flex justify-between items-center\">\r\n//               <div>\r\n//                 <h3 className=\"text-xl font-bold text-gray-800\">{test.name}</h3>\r\n//                 <p className=\"text-gray-600\">Price: {test.price}</p>\r\n//               </div>\r\n//               <button\r\n//                 className=\"bg-soft-blue text-white px-4 py-2 rounded-lg shadow-2xl transition duration-300 ease-in-out hover:scale-105 animate-button-pulse\"\r\n//                 onClick={() => handleSelectTest(test)}\r\n//               >\r\n//                 View Guidelines\r\n//               </button>\r\n//             </div>\r\n//             {selectedTest === test && !isPaymentSuccess && (\r\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\r\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Please make a payment to view guidelines:</h4>\r\n//                 <button\r\n//                   className={`mt-2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-2xl ${isPaymentProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\r\n//                   onClick={() => initiatePayment(test)}\r\n//                   disabled={isPaymentProcessing}\r\n//                 >\r\n//                   {isPaymentProcessing ? \"Processing...\" : \"Pay Now\"}\r\n//                 </button>\r\n//               </div>\r\n//             )}\r\n//             {selectedTest === test && isPaymentSuccess && (\r\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\r\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Guidelines:</h4>\r\n//                 <p className=\"text-gray-600\">{test.guidelines}</p>\r\n//               </div>\r\n//             )}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       {successMessage && (\r\n//         <div className=\"mt-6 p-4 bg-green-100 text-green-700 rounded-lg shadow-md\">\r\n//           <p>{successMessage}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LabTests;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst labTests = [\r\n  {\r\n    name: \"Blood Test\",\r\n    price: \"₹740\",\r\n    guidelines: \"Avoid eating or drinking anything except water for at least 8 hours before the test.\",\r\n  },\r\n  // Add other test data here\r\n];\r\n\r\nconst LabTests = () => {\r\n  const [selectedTest, setSelectedTest] = useState(null);\r\n  const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\r\n  const [isPaymentProcessing, setIsPaymentProcessing] = useState(false); // Loading state\r\n  const [successMessage, setSuccessMessage] = useState(\"\"); // New state for success message\r\n\r\n  // Load Razorpay Script Dynamically\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleSelectTest = (test) => {\r\n    setSelectedTest(test);\r\n    setIsPaymentSuccess(false); // Reset payment success status on test selection\r\n    setSuccessMessage(\"\"); // Reset success message\r\n  };\r\n\r\n  const handlePaymentSuccess = () => {\r\n    setIsPaymentSuccess(true);\r\n    setIsPaymentProcessing(false); // Stop loading indicator\r\n    setSuccessMessage(\"Payment successful! You can now view the test guidelines.\");\r\n\r\n    // Call the Twilio Notification API\r\n    fetch(\"http://127.0.0.1:4000/send-notification\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        phone: \"+918804339456\", // Replace with dynamic user's phone number\r\n        message: \"Your payment was successful! You can now view the test guidelines.\",\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          console.log(\"Notification sent successfully.\");\r\n        } else {\r\n          console.error(\"Failed to send notification:\", data.error);\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error sending notification:\", error));\r\n  };\r\n\r\n  const handlePaymentFailure = () => {\r\n    setIsPaymentProcessing(false); // Stop loading indicator\r\n    alert(\"Payment failed or was canceled. Please try again.\");\r\n  };\r\n\r\n  const initiatePayment = (test) => {\r\n    if (window.Razorpay) {\r\n      setIsPaymentProcessing(true); // Start loading indicator\r\n      const options = {\r\n        key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay key\r\n        amount: parseFloat(test.price.replace(\"₹\", \"\")) * 100, // Convert to paise\r\n        currency: \"INR\",\r\n        name: \"Health App\",\r\n        description: \"Lab Test Payment\",\r\n        handler: (response) => {\r\n          if (response.razorpay_payment_id) {\r\n            handlePaymentSuccess();\r\n          }\r\n        },\r\n        prefill: {\r\n          name: \"Test User\", // Replace with dynamic user name\r\n          email: \"testuser@example.com\", // Replace with dynamic user email\r\n          contact: \"+911234567890\", // Replace with dynamic user contact\r\n        },\r\n        notes: {\r\n          address: \"Health App Office\",\r\n        },\r\n        theme: {\r\n          color: \"#3399cc\",\r\n        },\r\n        modal: {\r\n          ondismiss: handlePaymentFailure, // Handle payment modal close\r\n        },\r\n      };\r\n\r\n      const razorpayInstance = new window.Razorpay(options);\r\n      razorpayInstance.open();\r\n    } else {\r\n      console.error(\"Razorpay SDK failed to load.\");\r\n      handlePaymentFailure();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 bg-light-gray rounded-lg shadow-2xl\">\r\n      <h2 className=\"text-3xl font-semibold text-soft-blue mb-4\">Available Lab Tests</h2>\r\n      <ul className=\"space-y-4\">\r\n        {labTests.map((test, index) => (\r\n          <li\r\n            key={index}\r\n            className={`border-b pb-4 ${selectedTest === test ? \"bg-blue-50 border-blue-500\" : \"\"}`}\r\n          >\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <h3 className=\"text-xl font-bold text-gray-800\">{test.name}</h3>\r\n                <p className=\"text-gray-600\">Price: {test.price}</p>\r\n              </div>\r\n              <button\r\n                className=\"bg-soft-blue text-white px-4 py-2 rounded-lg shadow-2xl transition duration-300 ease-in-out hover:scale-105 animate-button-pulse\"\r\n                onClick={() => handleSelectTest(test)}\r\n              >\r\n                View Guidelines\r\n              </button>\r\n            </div>\r\n            {selectedTest === test && !isPaymentSuccess && (\r\n              <div className=\"mt-2 p-4 border-t border-gray-300\">\r\n                <h4 className=\"text-lg font-semibold text-gray-700\">Please make a payment to view guidelines:</h4>\r\n                <button\r\n                  className={`mt-2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-2xl ${\r\n                    isPaymentProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n                  }`}\r\n                  onClick={() => initiatePayment(test)}\r\n                  disabled={isPaymentProcessing}\r\n                >\r\n                  {isPaymentProcessing ? \"Processing...\" : \"Pay Now\"}\r\n                </button>\r\n              </div>\r\n            )}\r\n            {selectedTest === test && isPaymentSuccess && (\r\n              <div className=\"mt-2 p-4 border-t border-gray-300\">\r\n                <h4 className=\"text-lg font-semibold text-gray-700\">Guidelines:</h4>\r\n                <p className=\"text-gray-600\">{test.guidelines}</p>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {successMessage && (\r\n        <div className=\"mt-6 p-4 bg-green-100 text-green-700 rounded-lg shadow-md\">\r\n          <p>{successMessage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LabTests;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAG,CACf;EACEC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,MAAM;EACbC,UAAU,EAAE;AACd;AACA;AAAA,CACD;AAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACc,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvE,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGj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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}