{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\LabTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst labTests = [{\n  name: \"General Physician (Dr. Arjun Sharma)\",\n  price: 740,\n  guidelines: \"Avoid eating heavy meals at least 2 hours before the appointment.\"\n}, {\n  name: \"Neurologist (Dr. Suresh Rao)\",\n  price: 10660,\n  guidelines: \"Ensure a full night's sleep, avoid stimulants, and list down any observed symptoms.\"\n}\n// Add more entries as needed\n];\nfunction LabTest() {\n  _s();\n  const [selectedTest, setSelectedTest] = useState(null);\n  const [paidTests, setPaidTests] = useState([]);\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.body.appendChild(script);\n    });\n  };\n  const handlePayment = async test => {\n    const res = await loadRazorpayScript();\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n    const options = {\n      key: \"your_razorpay_key_here\",\n      // Replace with your Razorpay API key\n      amount: test.price * 100,\n      // Convert to smallest currency unit (paise)\n      currency: \"INR\",\n      name: \"Lab Test Payment\",\n      description: `Payment for ${test.name}`,\n      image: \"https://your-logo-url.com/logo.png\",\n      // Optional company logo\n      handler: function (response) {\n        alert(`Payment successful for ${test.name}. Payment ID: ${response.razorpay_payment_id}`);\n        setPaidTests(prevPaidTests => [...prevPaidTests, test.name]);\n      },\n      prefill: {\n        name: \"Your Name\",\n        // Replace with dynamic user data\n        email: \"your-email@example.com\",\n        // Replace with dynamic user data\n        contact: \"9999999999\" // Replace with dynamic user data\n      },\n      theme: {\n        color: \"#3399cc\"\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  };\n  const displayGuidelines = test => {\n    if (paidTests.includes(test.name)) {\n      setSelectedTest(test);\n    } else {\n      alert(\"Please make a payment to view the guidelines.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lab Tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: 'none',\n        padding: 0\n      },\n      children: labTests.map((test, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          border: '1px solid #ccc',\n          padding: '10px',\n          marginBottom: '10px',\n          borderRadius: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: test.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: \\u20B9\", test.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), paidTests.includes(test.name) ? /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer'\n          },\n          onClick: () => displayGuidelines(test),\n          children: \"View Guidelines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            padding: '8px 12px',\n            backgroundColor: '#f44336',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer'\n          },\n          onClick: () => handlePayment(test),\n          children: \"Make Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), selectedTest && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        padding: '10px',\n        border: '1px solid #ccc',\n        borderRadius: '5px',\n        backgroundColor: '#f9f9f9'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Guidelines for \", selectedTest.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedTest.guidelines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(LabTest, \"wpgB+576J3XhyMZJGdsy8Tp5rzA=\");\n_c = LabTest;\nexport default LabTest;\nvar _c;\n$RefreshReg$(_c, \"LabTest\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","labTests","name","price","guidelines","LabTest","_s","selectedTest","setSelectedTest","paidTests","setPaidTests","loadRazorpayScript","Promise","resolve","script","document","createElement","src","onload","onerror","body","appendChild","handlePayment","test","res","alert","options","key","amount","currency","description","image","handler","response","razorpay_payment_id","prevPaidTests","prefill","email","contact","theme","color","paymentObject","window","Razorpay","open","displayGuidelines","includes","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","listStyleType","map","index","border","marginBottom","borderRadius","backgroundColor","cursor","onClick","marginTop","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/LabTest.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst labTests = [\r\n    { name: \"General Physician (Dr. Arjun Sharma)\", price: 740, guidelines: \"Avoid eating heavy meals at least 2 hours before the appointment.\" },\r\n    { name: \"Neurologist (Dr. Suresh Rao)\", price: 10660, guidelines: \"Ensure a full night's sleep, avoid stimulants, and list down any observed symptoms.\" },\r\n    // Add more entries as needed\r\n];\r\n\r\nfunction LabTest() {\r\n    const [selectedTest, setSelectedTest] = useState(null);\r\n    const [paidTests, setPaidTests] = useState([]);\r\n\r\n    const loadRazorpayScript = () => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n            script.onload = () => resolve(true);\r\n            script.onerror = () => resolve(false);\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    const handlePayment = async (test) => {\r\n        const res = await loadRazorpayScript();\r\n\r\n        if (!res) {\r\n            alert(\"Razorpay SDK failed to load. Are you online?\");\r\n            return;\r\n        }\r\n\r\n        const options = {\r\n            key: \"your_razorpay_key_here\", // Replace with your Razorpay API key\r\n            amount: test.price * 100, // Convert to smallest currency unit (paise)\r\n            currency: \"INR\",\r\n            name: \"Lab Test Payment\",\r\n            description: `Payment for ${test.name}`,\r\n            image: \"https://your-logo-url.com/logo.png\", // Optional company logo\r\n            handler: function (response) {\r\n                alert(`Payment successful for ${test.name}. Payment ID: ${response.razorpay_payment_id}`);\r\n                setPaidTests((prevPaidTests) => [...prevPaidTests, test.name]);\r\n            },\r\n            prefill: {\r\n                name: \"Your Name\", // Replace with dynamic user data\r\n                email: \"your-email@example.com\", // Replace with dynamic user data\r\n                contact: \"9999999999\", // Replace with dynamic user data\r\n            },\r\n            theme: {\r\n                color: \"#3399cc\",\r\n            },\r\n        };\r\n\r\n        const paymentObject = new window.Razorpay(options);\r\n        paymentObject.open();\r\n    };\r\n\r\n    const displayGuidelines = (test) => {\r\n        if (paidTests.includes(test.name)) {\r\n            setSelectedTest(test);\r\n        } else {\r\n            alert(\"Please make a payment to view the guidelines.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: '20px', fontFamily: 'Arial' }}>\r\n            <h1>Lab Tests</h1>\r\n            <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                {labTests.map((test, index) => (\r\n                    <li\r\n                        key={index}\r\n                        style={{\r\n                            border: '1px solid #ccc',\r\n                            padding: '10px',\r\n                            marginBottom: '10px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                    >\r\n                        <h3>{test.name}</h3>\r\n                        <p>Price: ₹{test.price}</p>\r\n                        {paidTests.includes(test.name) ? (\r\n                            <button\r\n                                style={{\r\n                                    padding: '8px 12px',\r\n                                    backgroundColor: '#4CAF50',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '5px',\r\n                                    cursor: 'pointer',\r\n                                }}\r\n                                onClick={() => displayGuidelines(test)}\r\n                            >\r\n                                View Guidelines\r\n                            </button>\r\n                        ) : (\r\n                            <button\r\n                                style={{\r\n                                    padding: '8px 12px',\r\n                                    backgroundColor: '#f44336',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '5px',\r\n                                    cursor: 'pointer',\r\n                                }}\r\n                                onClick={() => handlePayment(test)}\r\n                            >\r\n                                Make Payment\r\n                            </button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedTest && (\r\n                <div\r\n                    style={{\r\n                        marginTop: '20px',\r\n                        padding: '10px',\r\n                        border: '1px solid #ccc',\r\n                        borderRadius: '5px',\r\n                        backgroundColor: '#f9f9f9',\r\n                    }}\r\n                >\r\n                    <h2>Guidelines for {selectedTest.name}</h2>\r\n                    <p>{selectedTest.guidelines}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LabTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}