{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [storedSymptoms, setStoredSymptoms] = useState(\"\"); // Store user symptoms\n  const [consultationFee, setConsultationFee] = useState(null); // Store the consultation fee\n  const chatboxRef = useRef();\n  useEffect(() => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n\n    // Start speech recognition automatically after welcome message\n    startSpeechRecognition();\n  }, []);\n  const startSpeechRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.log(\"Speech recognition not supported in this browser.\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      console.log(\"Speech recognized: \", transcript);\n      setUserInput(transcript);\n      handleSend(); // Automatically send the recognized input\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error: \", event.error);\n    };\n    recognition.start();\n  };\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => {\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  };\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    console.log(\"User input before sending:\", userInput);\n    if (userInput.trim() === \"\") {\n      alert(\"Please enter your symptoms before sending.\");\n      return;\n    }\n    setResponses(prevResponses => [...prevResponses, `You said: ${userInput}`]);\n    setStoredSymptoms(userInput); // Store the user symptoms\n\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms: userInput\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(data.message);\n      setResponses(prevResponses => [...prevResponses, data.message || \"No response from server.\"]);\n\n      // If a consultation fee is included in the response, store it\n      const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\n      if (feeMatch) {\n        setConsultationFee(parseFloat(feeMatch[0])); // Store the consultation fee\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setResponses(prevResponses => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\n    }\n    setUserInput(\"\");\n  };\n  const handleClearChat = () => {\n    setResponses([]);\n    setPaymentAmount(\"\");\n    setStoredSymptoms(\"\"); // Clear stored symptoms\n    setConsultationFee(null); // Clear stored consultation fee\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n  };\n  const handlePayment = async () => {\n    const amount = parseFloat(paymentAmount);\n    if (isNaN(amount) || amount <= 0) {\n      alert(\"Please enter a valid positive amount.\");\n      return;\n    }\n\n    // Check if the entered payment amount matches the consultation fee\n    if (consultationFee === null || amount !== consultationFee) {\n      alert(`Please enter the correct consultation fee of ${consultationFee}.`);\n      return;\n    }\n    const res = await loadRazorpayScript();\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Please try again.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_lmkOFuIPmT2vi9\",\n      amount: amount * 100,\n      currency: \"INR\",\n      name: \"Health Chatbot Service\",\n      description: \"Chatbot Assistance Payment\",\n      handler: async function (response) {\n        setResponses(prevResponses => [...prevResponses, `Payment successful! Payment ID: ${response.razorpay_payment_id}`]);\n\n        // Fetch doctor suggestions again after successful payment\n        try {\n          const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              symptoms: storedSymptoms,\n              payment_status: true\n            }) // Include stored symptoms and payment status\n          });\n          if (!doctorResponse.ok) {\n            throw new Error(`Server error: ${doctorResponse.statusText}`);\n          }\n          const doctorData = await doctorResponse.json();\n          setResponses(prevResponses => [...prevResponses, doctorData.message || \"No response from doctor suggestion.\"]);\n        } catch (error) {\n          console.error(\"Error:\", error);\n          setResponses(prevResponses => [...prevResponses, `Error fetching doctor suggestions: ${error.message}`]);\n        }\n      },\n      prefill: {\n        name: \"CareLink\",\n        email: \"carelink@gmail.com\",\n        contact: \"9999999999\",\n        __prefill_vpa: \"success@razorpay\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      },\n      method: {\n        upi: true,\n        card: true,\n        netbanking: true,\n        wallet: true\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  };\n  const handlePaymentChange = e => {\n    const value = e.target.value;\n    if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n      setPaymentAmount(value);\n    }\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-cover bg-center\",\n      style: {\n        backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center mb-4 text-gray-800\",\n        children: \"\\uD83E\\uDD16 Health Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\",\n        ref: chatboxRef,\n        children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\",\n          children: response\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user-input\",\n          type: \"text\",\n          value: userInput,\n          onChange: handleUserInput,\n          placeholder: \"Type your symptoms...\",\n          className: \"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearChat,\n        className: \"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\",\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-gray-800\",\n          children: \"\\uD83D\\uDCB3 Make a Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: paymentAmount,\n          onChange: handlePaymentChange,\n          placeholder: \"Enter amount\",\n          className: \"border border-gray-300 rounded-lg p-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePayment,\n          className: \"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md\",\n          children: \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"Yxh7ahjtqA1HZNQ+gqdg1thwSHc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","responses","setResponses","paymentAmount","setPaymentAmount","storedSymptoms","setStoredSymptoms","consultationFee","setConsultationFee","chatboxRef","welcomeMessage","inputField","document","getElementById","focus","startSpeechRecognition","SpeechRecognition","window","webkitSpeechRecognition","console","log","recognition","lang","interimResults","onresult","event","transcript","results","handleSend","onerror","error","start","loadRazorpayScript","Promise","resolve","script","createElement","src","onload","body","appendChild","handleUserInput","e","target","value","trim","alert","prevResponses","response","fetch","method","headers","JSON","stringify","symptoms","ok","Error","status","data","json","message","feeMatch","match","parseFloat","handleClearChat","handlePayment","amount","isNaN","res","options","key","currency","name","description","handler","razorpay_payment_id","doctorResponse","payment_status","statusText","doctorData","prefill","email","contact","__prefill_vpa","theme","color","upi","card","netbanking","wallet","paymentObject","Razorpay","open","handlePaymentChange","test","current","scrollTop","scrollHeight","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","id","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Chatbot = () => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const [paymentAmount, setPaymentAmount] = useState(\"\");\r\n    const [storedSymptoms, setStoredSymptoms] = useState(\"\"); // Store user symptoms\r\n    const [consultationFee, setConsultationFee] = useState(null); // Store the consultation fee\r\n    const chatboxRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n\r\n        const inputField = document.getElementById(\"user-input\");\r\n        if (inputField) {\r\n            inputField.focus();\r\n        }\r\n\r\n        // Start speech recognition automatically after welcome message\r\n        startSpeechRecognition();\r\n    }, []);\r\n\r\n    const startSpeechRecognition = () => {\r\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        if (!SpeechRecognition) {\r\n            console.log(\"Speech recognition not supported in this browser.\");\r\n            return;\r\n        }\r\n\r\n        const recognition = new SpeechRecognition();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            console.log(\"Speech recognized: \", transcript);\r\n            setUserInput(transcript);\r\n            handleSend(); // Automatically send the recognized input\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error: \", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    const loadRazorpayScript = () => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n            script.onload = () => {\r\n                resolve(true);\r\n            };\r\n            script.onerror = () => {\r\n                resolve(false);\r\n            };\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    const handleUserInput = (e) => {\r\n        setUserInput(e.target.value);\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        console.log(\"User input before sending:\", userInput);\r\n        \r\n        if (userInput.trim() === \"\") {\r\n            alert(\"Please enter your symptoms before sending.\");\r\n            return;\r\n        }\r\n\r\n        setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n        setStoredSymptoms(userInput); // Store the user symptoms\r\n\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ symptoms: userInput }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(data.message);\r\n            setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n\r\n            // If a consultation fee is included in the response, store it\r\n            const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\r\n            if (feeMatch) {\r\n                setConsultationFee(parseFloat(feeMatch[0])); // Store the consultation fee\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\r\n        }\r\n\r\n        setUserInput(\"\"); \r\n    };\r\n\r\n    const handleClearChat = () => {\r\n        setResponses([]);\r\n        setPaymentAmount(\"\"); \r\n        setStoredSymptoms(\"\"); // Clear stored symptoms\r\n        setConsultationFee(null); // Clear stored consultation fee\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n    };\r\n\r\n    const handlePayment = async () => {\r\n        const amount = parseFloat(paymentAmount); \r\n\r\n        if (isNaN(amount) || amount <= 0) {\r\n            alert(\"Please enter a valid positive amount.\");\r\n            return;\r\n        }\r\n\r\n        // Check if the entered payment amount matches the consultation fee\r\n        if (consultationFee === null || amount !== consultationFee) {\r\n            alert(`Please enter the correct consultation fee of ${consultationFee}.`);\r\n            return;\r\n        }\r\n\r\n        const res = await loadRazorpayScript();\r\n\r\n        if (!res) {\r\n            alert(\"Razorpay SDK failed to load. Please try again.\");\r\n            return;\r\n        }\r\n\r\n        const options = {\r\n            key: \"rzp_test_lmkOFuIPmT2vi9\",\r\n            amount: amount * 100,\r\n            currency: \"INR\",\r\n            name: \"Health Chatbot Service\",\r\n            description: \"Chatbot Assistance Payment\",\r\n            handler: async function (response) {\r\n                setResponses((prevResponses) => [\r\n                    ...prevResponses,\r\n                    `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n                ]);\r\n\r\n                // Fetch doctor suggestions again after successful payment\r\n                try {\r\n                    const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true }), // Include stored symptoms and payment status\r\n                    });\r\n\r\n                    if (!doctorResponse.ok) {\r\n                        throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n                    }\r\n\r\n                    const doctorData = await doctorResponse.json();\r\n                    setResponses((prevResponses) => [\r\n                        ...prevResponses,\r\n                        doctorData.message || \"No response from doctor suggestion.\",\r\n                    ]);\r\n                } catch (error) {\r\n                    console.error(\"Error:\", error);\r\n                    setResponses((prevResponses) => [\r\n                        ...prevResponses,\r\n                        `Error fetching doctor suggestions: ${error.message}`,\r\n                    ]);\r\n                }\r\n            },\r\n            prefill: {\r\n                name: \"CareLink\",\r\n                email: \"carelink@gmail.com\",\r\n                contact: \"9999999999\",\r\n                __prefill_vpa: \"success@razorpay\",\r\n            },\r\n            theme: {\r\n                color: \"#3399cc\",\r\n            },\r\n            method: {\r\n                upi: true,       \r\n                card: true,      \r\n                netbanking: true, \r\n                wallet: true     \r\n            },\r\n        };\r\n\r\n        const paymentObject = new window.Razorpay(options);\r\n        paymentObject.open();\r\n    };\r\n\r\n    const handlePaymentChange = (e) => {\r\n        const value = e.target.value;\r\n\r\n        if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n            setPaymentAmount(value);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (chatboxRef.current) {\r\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n        }\r\n    }, [responses]);\r\n\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n            <div\r\n                className=\"absolute inset-0 bg-cover bg-center\"\r\n                style={{\r\n                    backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n                }}\r\n            >\r\n                <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n            </div>\r\n            <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n                <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n                <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n                    {responses.map((response, index) => (\r\n                        <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n                            {response}\r\n                        </p>\r\n                    ))}\r\n                </div>\r\n                <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n                    <input\r\n                        id=\"user-input\"\r\n                        type=\"text\"\r\n                        value={userInput}\r\n                        onChange={handleUserInput}\r\n                        placeholder=\"Type your symptoms...\"\r\n                        className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n                    />\r\n                    <button\r\n                        onClick={handleSend}\r\n                        className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    onClick={handleClearChat}\r\n                    className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\"\r\n                >\r\n                    Clear Chat\r\n                </button>\r\n                <div className=\"mt-4\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800\">ðŸ’³ Make a Payment</h3>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={paymentAmount}\r\n                        onChange={handlePaymentChange}\r\n                        placeholder=\"Enter amount\"\r\n                        className=\"border border-gray-300 rounded-lg p-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n                    />\r\n                    <button\r\n                        onClick={handlePayment}\r\n                        className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md\"\r\n                    >\r\n                        Pay Now\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAMiB,UAAU,GAAGf,MAAM,CAAC,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ,MAAMiB,cAAc,GAAG,+DAA+D;IACtFR,YAAY,CAAC,CAACQ,cAAc,CAAC,CAAC;IAE9B,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IACxD,IAAIF,UAAU,EAAE;MACZA,UAAU,CAACG,KAAK,CAAC,CAAC;IACtB;;IAEA;IACAC,sBAAsB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,sBAAsB,GAAGA,CAAA,KAAM;IACjC,MAAMC,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IACpF,IAAI,CAACF,iBAAiB,EAAE;MACpBG,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAChE;IACJ;IAEA,MAAMC,WAAW,GAAG,IAAIL,iBAAiB,CAAC,CAAC;IAC3CK,WAAW,CAACC,IAAI,GAAG,OAAO;IAC1BD,WAAW,CAACE,cAAc,GAAG,KAAK;IAElCF,WAAW,CAACG,QAAQ,GAAIC,KAAK,IAAK;MAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;MACjDP,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEM,UAAU,CAAC;MAC9C1B,YAAY,CAAC0B,UAAU,CAAC;MACxBE,UAAU,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAEDP,WAAW,CAACQ,OAAO,GAAIJ,KAAK,IAAK;MAC7BN,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAEL,KAAK,CAACK,KAAK,CAAC;IAC5D,CAAC;IAEDT,WAAW,CAACU,KAAK,CAAC,CAAC;EACvB,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC5B,MAAMC,MAAM,GAAGvB,QAAQ,CAACwB,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,GAAG,GAAG,8CAA8C;MAC3DF,MAAM,CAACG,MAAM,GAAG,MAAM;QAClBJ,OAAO,CAAC,IAAI,CAAC;MACjB,CAAC;MACDC,MAAM,CAACN,OAAO,GAAG,MAAM;QACnBK,OAAO,CAAC,KAAK,CAAC;MAClB,CAAC;MACDtB,QAAQ,CAAC2B,IAAI,CAACC,WAAW,CAACL,MAAM,CAAC;IACrC,CAAC,CAAC;EACN,CAAC;EAED,MAAMM,eAAe,GAAIC,CAAC,IAAK;IAC3B1C,YAAY,CAAC0C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMhB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3BT,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAErB,SAAS,CAAC;IAEpD,IAAIA,SAAS,CAAC8C,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzBC,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACJ;IAEA5C,YAAY,CAAE6C,aAAa,IAAK,CAAC,GAAGA,aAAa,EAAE,aAAahD,SAAS,EAAE,CAAC,CAAC;IAC7EO,iBAAiB,CAACP,SAAS,CAAC,CAAC,CAAC;;IAE9B,IAAI;MACA,MAAMiD,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDZ,IAAI,EAAEa,IAAI,CAACC,SAAS,CAAC;UAAEC,QAAQ,EAAEvD;QAAU,CAAC;MAChD,CAAC,CAAC;MAEF,IAAI,CAACiD,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC7D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCxC,OAAO,CAACC,GAAG,CAACsC,IAAI,CAACE,OAAO,CAAC;MACzB1D,YAAY,CAAE6C,aAAa,IAAK,CAAC,GAAGA,aAAa,EAAEW,IAAI,CAACE,OAAO,IAAI,0BAA0B,CAAC,CAAC;;MAE/F;MACA,MAAMC,QAAQ,GAAGH,IAAI,CAACE,OAAO,CAACE,KAAK,CAAC,eAAe,CAAC;MACpD,IAAID,QAAQ,EAAE;QACVrD,kBAAkB,CAACuD,UAAU,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjD;IACJ,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B5B,YAAY,CAAE6C,aAAa,IAAK,CAAC,GAAGA,aAAa,EAAE,UAAUjB,KAAK,CAAC8B,OAAO,IAAI,8BAA8B,EAAE,CAAC,CAAC;IACpH;IAEA5D,YAAY,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMgE,eAAe,GAAGA,CAAA,KAAM;IAC1B9D,YAAY,CAAC,EAAE,CAAC;IAChBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IACvBE,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,MAAME,cAAc,GAAG,+DAA+D;IACtFR,YAAY,CAAC,CAACQ,cAAc,CAAC,CAAC;EAClC,CAAC;EAED,MAAMuD,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,MAAM,GAAGH,UAAU,CAAC5D,aAAa,CAAC;IAExC,IAAIgE,KAAK,CAACD,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC,EAAE;MAC9BpB,KAAK,CAAC,uCAAuC,CAAC;MAC9C;IACJ;;IAEA;IACA,IAAIvC,eAAe,KAAK,IAAI,IAAI2D,MAAM,KAAK3D,eAAe,EAAE;MACxDuC,KAAK,CAAC,gDAAgDvC,eAAe,GAAG,CAAC;MACzE;IACJ;IAEA,MAAM6D,GAAG,GAAG,MAAMpC,kBAAkB,CAAC,CAAC;IAEtC,IAAI,CAACoC,GAAG,EAAE;MACNtB,KAAK,CAAC,gDAAgD,CAAC;MACvD;IACJ;IAEA,MAAMuB,OAAO,GAAG;MACZC,GAAG,EAAE,yBAAyB;MAC9BJ,MAAM,EAAEA,MAAM,GAAG,GAAG;MACpBK,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE,wBAAwB;MAC9BC,WAAW,EAAE,4BAA4B;MACzCC,OAAO,EAAE,eAAAA,CAAgB1B,QAAQ,EAAE;QAC/B9C,YAAY,CAAE6C,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB,mCAAmCC,QAAQ,CAAC2B,mBAAmB,EAAE,CACpE,CAAC;;QAEF;QACA,IAAI;UACA,MAAMC,cAAc,GAAG,MAAM3B,KAAK,CAAC,sCAAsC,EAAE;YACvEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDZ,IAAI,EAAEa,IAAI,CAACC,SAAS,CAAC;cAAEC,QAAQ,EAAEjD,cAAc;cAAEwE,cAAc,EAAE;YAAK,CAAC,CAAC,CAAE;UAC9E,CAAC,CAAC;UAEF,IAAI,CAACD,cAAc,CAACrB,EAAE,EAAE;YACpB,MAAM,IAAIC,KAAK,CAAC,iBAAiBoB,cAAc,CAACE,UAAU,EAAE,CAAC;UACjE;UAEA,MAAMC,UAAU,GAAG,MAAMH,cAAc,CAACjB,IAAI,CAAC,CAAC;UAC9CzD,YAAY,CAAE6C,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChBgC,UAAU,CAACnB,OAAO,IAAI,qCAAqC,CAC9D,CAAC;QACN,CAAC,CAAC,OAAO9B,KAAK,EAAE;UACZX,OAAO,CAACW,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;UAC9B5B,YAAY,CAAE6C,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB,sCAAsCjB,KAAK,CAAC8B,OAAO,EAAE,CACxD,CAAC;QACN;MACJ,CAAC;MACDoB,OAAO,EAAE;QACLR,IAAI,EAAE,UAAU;QAChBS,KAAK,EAAE,oBAAoB;QAC3BC,OAAO,EAAE,YAAY;QACrBC,aAAa,EAAE;MACnB,CAAC;MACDC,KAAK,EAAE;QACHC,KAAK,EAAE;MACX,CAAC;MACDnC,MAAM,EAAE;QACJoC,GAAG,EAAE,IAAI;QACTC,IAAI,EAAE,IAAI;QACVC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACZ;IACJ,CAAC;IAED,MAAMC,aAAa,GAAG,IAAIzE,MAAM,CAAC0E,QAAQ,CAACtB,OAAO,CAAC;IAClDqB,aAAa,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMC,mBAAmB,GAAInD,CAAC,IAAK;IAC/B,MAAME,KAAK,GAAGF,CAAC,CAACC,MAAM,CAACC,KAAK;IAE5B,IAAIA,KAAK,KAAK,EAAE,IAAI,mBAAmB,CAACkD,IAAI,CAAClD,KAAK,CAAC,EAAE;MACjDxC,gBAAgB,CAACwC,KAAK,CAAC;IAC3B;EACJ,CAAC;EAEDnD,SAAS,CAAC,MAAM;IACZ,IAAIgB,UAAU,CAACsF,OAAO,EAAE;MACpBtF,UAAU,CAACsF,OAAO,CAACC,SAAS,GAAGvF,UAAU,CAACsF,OAAO,CAACE,YAAY;IAClE;EACJ,CAAC,EAAE,CAAChG,SAAS,CAAC,CAAC;EAGf,oBACIL,OAAA;IAAKsG,SAAS,EAAC,wEAAwE;IAAAC,QAAA,gBACnFvG,OAAA;MACIsG,SAAS,EAAC,qCAAqC;MAC/CE,KAAK,EAAE;QACHC,eAAe,EAAE;MACrB,CAAE;MAAAF,QAAA,eAEFvG,OAAA;QAAKsG,SAAS,EAAC;MAAuD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC,eACN7G,OAAA;MAAKsG,SAAS,EAAC,6KAA6K;MAAAC,QAAA,gBACxLvG,OAAA;QAAIsG,SAAS,EAAC,uDAAuD;QAAAC,QAAA,EAAC;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5F7G,OAAA;QAAKsG,SAAS,EAAC,6FAA6F;QAACQ,GAAG,EAAEjG,UAAW;QAAA0F,QAAA,EACxHlG,SAAS,CAAC0G,GAAG,CAAC,CAAC3D,QAAQ,EAAE4D,KAAK,kBAC3BhH,OAAA;UAAesG,SAAS,EAAC,8EAA8E;UAAAC,QAAA,EAClGnD;QAAQ,GADL4D,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACN7G,OAAA;QAAKsG,SAAS,EAAC,oEAAoE;QAAAC,QAAA,gBAC/EvG,OAAA;UACIiH,EAAE,EAAC,YAAY;UACfC,IAAI,EAAC,MAAM;UACXlE,KAAK,EAAE7C,SAAU;UACjBgH,QAAQ,EAAEtE,eAAgB;UAC1BuE,WAAW,EAAC,uBAAuB;UACnCd,SAAS,EAAC;QAAoJ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjK,CAAC,eACF7G,OAAA;UACIqH,OAAO,EAAErF,UAAW;UACpBsE,SAAS,EAAC,qHAAqH;UAAAC,QAAA,EAClI;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACN7G,OAAA;QACIqH,OAAO,EAAEjD,eAAgB;QACzBkC,SAAS,EAAC,qGAAqG;QAAAC,QAAA,EAClH;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT7G,OAAA;QAAKsG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACjBvG,OAAA;UAAIsG,SAAS,EAAC,qCAAqC;UAAAC,QAAA,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1E7G,OAAA;UACIkH,IAAI,EAAC,MAAM;UACXlE,KAAK,EAAEzC,aAAc;UACrB4G,QAAQ,EAAElB,mBAAoB;UAC9BmB,WAAW,EAAC,cAAc;UAC1Bd,SAAS,EAAC;QAAoJ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjK,CAAC,eACF7G,OAAA;UACIqH,OAAO,EAAEhD,aAAc;UACvBiC,SAAS,EAAC,yGAAyG;UAAAC,QAAA,EACtH;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC3G,EAAA,CA9QID,OAAO;AAAAqH,EAAA,GAAPrH,OAAO;AAgRb,eAAeA,OAAO;AAAC,IAAAqH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}