{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                     body: JSON.stringify({ symptoms: userInput }),\n//                 });\n\n//                 if (!response.ok) {\n//                     throw new Error(`Server error: ${response.statusText}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\n//             } catch (error) {\n//                 console.error(\"Error:\", error);\n//                 setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\n//             }\n\n//             setUserInput(\"\"); // Clear input after sending\n//         }\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     // Load Razorpay script dynamically\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                     body: JSON.stringify({ symptoms: userInput }),\n//                 });\n\n//                 if (!response.ok) {\n//                     throw new Error(`Server error: ${response.statusText}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\n//             } catch (error) {\n//                 console.error(\"Error:\", error);\n//                 setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\n//             }\n\n//             setUserInput(\"\"); // Clear input after sending\n//         }\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     const handlePayment = async () => {\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\n//             amount: 1000 * 100, // amount in the smallest currency unit (e.g., paise for INR)\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\n//                 ]);\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//             },\n//             notes: {\n//                 address: \"CareLink\",\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 <button\n//                     onClick={handlePayment}\n//                     className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Make Payment\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const chatboxRef = useRef();\n  useEffect(() => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n  }, []);\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => {\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  };\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (userInput.trim()) {\n      setResponses(prevResponses => [...prevResponses, `You said: ${userInput}`]);\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            symptoms: userInput\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Server error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setResponses(prevResponses => [...prevResponses, data.message || \"No response from server.\"]);\n      } catch (error) {\n        console.error(\"Error:\", error);\n        setResponses(prevResponses => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\n      }\n      setUserInput(\"\"); // Clear input after sending\n    }\n  };\n  const handleClearChat = () => {\n    setResponses([]);\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n  };\n  const handlePayment = async () => {\n    const res = await loadRazorpayScript();\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Please try again.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_lmkOFuIPmT2vi9\",\n      // Replace with your Razorpay API key\n      amount: 1000 * 100,\n      // amount in the smallest currency unit (e.g., paise for INR)\n      currency: \"INR\",\n      name: \"Health Chatbot Service\",\n      description: \"Chatbot Assistance Payment\",\n      handler: function (response) {\n        setResponses(prevResponses => [...prevResponses, `Payment successful! Payment ID: ${response.razorpay_payment_id}`]);\n      },\n      prefill: {\n        name: \"CareLink\",\n        email: \"carelink@gmail.com\",\n        contact: \"9999999999\"\n      },\n      notes: {\n        address: \"Health Chatbot Corporate Office\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      },\n      // Focusing on UPI with QR code functionality\n      method: {\n        upi: true,\n        // Enabling UPI prominently\n        card: true,\n        // Optionally, add other methods if desired\n        netbanking: false\n      },\n      upi: {\n        // Ensuring the UPI method uses QR code for scanning directly from apps like Google Pay\n        __display_method: \"upi\",\n        // Show UPI prominently\n        __prefill_vpa: \"test@upi\" // Replace with actual UPI ID for testing\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-cover bg-center\",\n      style: {\n        backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center mb-4 text-gray-800\",\n        children: \"\\uD83E\\uDD16 Health Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\",\n        ref: chatboxRef,\n        children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\",\n          children: response\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user-input\",\n          type: \"text\",\n          value: userInput,\n          onChange: handleUserInput,\n          placeholder: \"Type your symptoms...\",\n          className: \"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearChat,\n        className: \"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\",\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePayment,\n        className: \"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\",\n        children: \"Make Payment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"S4H8oJ7hkz6Vf9ydGhpGU6l8+IQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","responses","setResponses","chatboxRef","welcomeMessage","inputField","document","getElementById","focus","loadRazorpayScript","Promise","resolve","script","createElement","src","onload","onerror","body","appendChild","handleUserInput","e","target","value","handleSend","trim","prevResponses","response","fetch","method","headers","JSON","stringify","symptoms","ok","Error","statusText","data","json","message","error","console","handleClearChat","handlePayment","res","alert","options","key","amount","currency","name","description","handler","razorpay_payment_id","prefill","email","contact","notes","address","theme","color","upi","card","netbanking","__display_method","__prefill_vpa","paymentObject","window","Razorpay","open","current","scrollTop","scrollHeight","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","id","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//             try {\r\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                     method: \"POST\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                     body: JSON.stringify({ symptoms: userInput }),\r\n//                 });\r\n\r\n//                 if (!response.ok) {\r\n//                     throw new Error(`Server error: ${response.statusText}`);\r\n//                 }\r\n\r\n//                 const data = await response.json();\r\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n//             } catch (error) {\r\n//                 console.error(\"Error:\", error);\r\n//                 setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\r\n//             }\r\n\r\n//             setUserInput(\"\"); // Clear input after sending\r\n//         }\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     // Load Razorpay script dynamically\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//             try {\r\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                     method: \"POST\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                     body: JSON.stringify({ symptoms: userInput }),\r\n//                 });\r\n\r\n//                 if (!response.ok) {\r\n//                     throw new Error(`Server error: ${response.statusText}`);\r\n//                 }\r\n\r\n//                 const data = await response.json();\r\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n//             } catch (error) {\r\n//                 console.error(\"Error:\", error);\r\n//                 setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\r\n//             }\r\n\r\n//             setUserInput(\"\"); // Clear input after sending\r\n//         }\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n//             amount: 1000 * 100, // amount in the smallest currency unit (e.g., paise for INR)\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n//                 ]);\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//             },\r\n//             notes: {\r\n//                 address: \"CareLink\",\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 <button\r\n//                     onClick={handlePayment}\r\n//                     className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Make Payment\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Chatbot = () => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const chatboxRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n\r\n        const inputField = document.getElementById(\"user-input\");\r\n        if (inputField) {\r\n            inputField.focus();\r\n        }\r\n    }, []);\r\n\r\n    const loadRazorpayScript = () => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n            script.onload = () => {\r\n                resolve(true);\r\n            };\r\n            script.onerror = () => {\r\n                resolve(false);\r\n            };\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    const handleUserInput = (e) => {\r\n        setUserInput(e.target.value);\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (userInput.trim()) {\r\n            setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n            try {\r\n                const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ symptoms: userInput }),\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Server error: ${response.statusText}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n            } catch (error) {\r\n                console.error(\"Error:\", error);\r\n                setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\r\n            }\r\n\r\n            setUserInput(\"\"); // Clear input after sending\r\n        }\r\n    };\r\n\r\n    const handleClearChat = () => {\r\n        setResponses([]);\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n    };\r\n\r\n    const handlePayment = async () => {\r\n        const res = await loadRazorpayScript();\r\n    \r\n        if (!res) {\r\n            alert(\"Razorpay SDK failed to load. Please try again.\");\r\n            return;\r\n        }\r\n    \r\n        const options = {\r\n            key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n            amount: 1000 * 100, // amount in the smallest currency unit (e.g., paise for INR)\r\n            currency: \"INR\",\r\n            name: \"Health Chatbot Service\",\r\n            description: \"Chatbot Assistance Payment\",\r\n            handler: function (response) {\r\n                setResponses((prevResponses) => [\r\n                    ...prevResponses,\r\n                    `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n                ]);\r\n            },\r\n            prefill: {\r\n                name: \"CareLink\",\r\n                email: \"carelink@gmail.com\",\r\n                contact: \"9999999999\",\r\n            },\r\n            notes: {\r\n                address: \"Health Chatbot Corporate Office\",\r\n            },\r\n            theme: {\r\n                color: \"#3399cc\",\r\n            },\r\n            // Focusing on UPI with QR code functionality\r\n            method: {\r\n                upi: true,  // Enabling UPI prominently\r\n                card: true, // Optionally, add other methods if desired\r\n                netbanking: false,\r\n            },\r\n            upi: {\r\n                // Ensuring the UPI method uses QR code for scanning directly from apps like Google Pay\r\n                __display_method: \"upi\",  // Show UPI prominently\r\n                __prefill_vpa: \"test@upi\" // Replace with actual UPI ID for testing\r\n            }\r\n        };\r\n    \r\n        const paymentObject = new window.Razorpay(options);\r\n        paymentObject.open();\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (chatboxRef.current) {\r\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n        }\r\n    }, [responses]);\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n            <div\r\n                className=\"absolute inset-0 bg-cover bg-center\"\r\n                style={{\r\n                    backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n                }}\r\n            >\r\n                <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n            </div>\r\n            <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n                <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n                <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n                    {responses.map((response, index) => (\r\n                        <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n                            {response}\r\n                        </p>\r\n                    ))}\r\n                </div>\r\n                <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n                    <input\r\n                        id=\"user-input\"\r\n                        type=\"text\"\r\n                        value={userInput}\r\n                        onChange={handleUserInput}\r\n                        placeholder=\"Type your symptoms...\"\r\n                        className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n                    />\r\n                    <button\r\n                        onClick={handleSend}\r\n                        className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    onClick={handleClearChat}\r\n                    className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                >\r\n                    Clear Chat\r\n                </button>\r\n                <button\r\n                    onClick={handlePayment}\r\n                    className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                >\r\n                    Make Payment\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AA0BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}