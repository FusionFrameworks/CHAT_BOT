{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                     body: JSON.stringify({ symptoms: userInput }),\n//                 });\n\n//                 if (!response.ok) {\n//                     throw new Error(`Server error: ${response.statusText}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\n//             } catch (error) {\n//                 console.error(\"Error:\", error);\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Error: ${error.message || \"Unable to reach the backend.\"}`,\n//                 ]);\n//             }\n\n//             setUserInput(\"\");\n//         }\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     const handlePayment = async () => {\n//         const amount = parseFloat(paymentAmount); // Convert input to float\n\n//         // Validate amount\n//         if (isNaN(amount) || amount <= 0) {\n//             alert(\"Please enter a valid positive amount.\");\n//             return;\n//         }\n\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\n//                 ]);\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//             method: {\n//                 upi: true,       // Enable UPI\n//                 card: true,      // Enable card payments\n//                 netbanking: true, // Enable net banking\n//                 wallet: true     // Enable wallets like Paytm, etc.\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     const handlePaymentChange = (e) => {\n//         const value = e.target.value;\n\n//         // Validate input: Allow only positive numbers\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n//             setPaymentAmount(value); // Update state only if it's a valid number\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 {/* Payment Input */}\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         type=\"number\"\n//                         value={paymentAmount}\n//                         onChange={handlePaymentChange} // Updated to use new handler\n//                         placeholder=\"Enter amount to pay\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                         min=\"0\" // Prevent negative input in the input field\n//                     />\n//                     <button\n//                         onClick={handlePayment}\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Make Payment\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                     body: JSON.stringify({ symptoms: userInput }),\n//                 });\n\n//                 if (!response.ok) {\n//                     throw new Error(`Server error: ${response.statusText}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\n//             } catch (error) {\n//                 console.error(\"Error:\", error);\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Error: ${error.message || \"Unable to reach the backend.\"}`,\n//                 ]);\n//             }\n\n//             setUserInput(\"\");\n//         }\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     const handlePayment = async () => {\n//         const amount = parseFloat(paymentAmount); // Convert input to float\n\n//         // Validate amount\n//         if (isNaN(amount) || amount <= 0) {\n//             alert(\"Please enter a valid positive amount.\");\n//             return;\n//         }\n\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: async function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\n//                 ]);\n\n//                 // Fetch doctor suggestions again after successful payment\n//                 try {\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                         method: \"POST\",\n//                         headers: {\n//                             \"Content-Type\": \"application/json\",\n//                         },\n//                         body: JSON.stringify({ symptoms: userInput }), // Use the existing user input for suggestions\n//                     });\n\n//                     if (!doctorResponse.ok) {\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\n//                     }\n\n//                     const doctorData = await doctorResponse.json();\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         doctorData.message || \"No response from server.\",\n//                     ]);\n//                 } catch (error) {\n//                     console.error(\"Error:\", error);\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         `Error fetching doctor suggestion: ${error.message || \"Unable to reach the backend.\"}`,\n//                     ]);\n//                 }\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//             method: {\n//                 upi: true,       // Enable UPI\n//                 card: true,      // Enable card payments\n//                 netbanking: true, // Enable net banking\n//                 wallet: true     // Enable wallets like Paytm, etc.\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     const handlePaymentChange = (e) => {\n//         const value = e.target.value;\n\n//         // Validate input: Allow only positive numbers\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n//             setPaymentAmount(value); // Update state only if it's a valid number\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 {/* Payment Input */}\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         type=\"number\"\n//                         value={paymentAmount}\n//                         onChange={handlePaymentChange} // Updated to use new handler\n//                         placeholder=\"Enter amount to pay\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                         min=\"0\" // Prevent negative input in the input field\n//                     />\n//                     <button\n//                         onClick={handlePayment}\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Make Payment\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\n// // Chatbot.js\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         // Log the user input\n//         console.log(\"User input before sending:\", userInput);\n\n//         // Validate input\n//         if (userInput.trim() === \"\") {\n//             alert(\"Please enter your symptoms before sending.\");\n//             return;\n//         }\n\n//         // Update the responses state with the user's message\n//         setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({ symptoms: userInput }), // Send the symptoms\n//             });\n\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! status: ${response.status}`);\n//             }\n\n//             const data = await response.json();\n//             setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\n//         } catch (error) {\n//             console.error(\"Error:\", error);\n//             setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\n//         }\n\n//         setUserInput(\"\"); // Clear the input after sending\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     const handlePayment = async () => {\n//         const amount = parseFloat(paymentAmount); // Convert input to float\n\n//         // Validate amount\n//         if (isNaN(amount) || amount <= 0) {\n//             alert(\"Please enter a valid positive amount.\");\n//             return;\n//         }\n\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: async function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\n//                 ]);\n\n//                 // Fetch doctor suggestions again after successful payment\n//                 try {\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                         method: \"POST\",\n//                         headers: {\n//                             \"Content-Type\": \"application/json\",\n//                         },\n//                         body: JSON.stringify({ symptoms: userInput }), // Use the existing user input for suggestions\n//                     });\n\n//                     if (!doctorResponse.ok) {\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\n//                     }\n\n//                     const doctorData = await doctorResponse.json();\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         doctorData.message || \"No response from doctor suggestion.\",\n//                     ]);\n//                 } catch (error) {\n//                     console.error(\"Error:\", error);\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         `Error fetching doctor suggestions: ${error.message}`,\n//                     ]);\n//                 }\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//             method: {\n//                 upi: true,       // Enable UPI\n//                 card: true,      // Enable card payments\n//                 netbanking: true, // Enable net banking\n//                 wallet: true     // Enable wallets like Paytm, etc.\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     const handlePaymentChange = (e) => {\n//         const value = e.target.value;\n\n//         // Validate input: Allow only positive numbers\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n//             setPaymentAmount(value); // Update state only if it's a valid number\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 {/* Payment Input */}\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         type=\"number\"\n//                         value={paymentAmount}\n//                         onChange={handlePaymentChange} // Updated to use new handler\n//                         placeholder=\"Enter amount to pay\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                         min=\"0\" // Prevent negative input in the input field\n//                     />\n//                     <button\n//                         onClick={handlePayment}\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Make Payment\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\n  const chatboxRef = useRef();\n  useEffect(() => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n  }, []);\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => {\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  };\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    // Validate input\n    if (userInput.trim() === \"\") {\n      alert(\"Please enter your symptoms before sending.\");\n      return;\n    }\n\n    // Log the user input\n    console.log(\"User input before sending:\", userInput);\n\n    // Update the responses state with the user's message\n    setResponses(prevResponses => [...prevResponses, `You said: ${userInput}`]);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms: userInput\n        }) // Send the symptoms\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResponses(prevResponses => [...prevResponses, data.message || \"No response from server.\"]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setResponses(prevResponses => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\n    }\n    setUserInput(\"\"); // Clear the input after sending\n  };\n  const handleClearChat = () => {\n    setResponses([]);\n    setPaymentAmount(\"\"); // Clear payment amount on chat clear\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n  };\n  const handlePayment = async () => {\n    const amount = parseFloat(paymentAmount); // Convert input to float\n\n    // Validate amount\n    if (isNaN(amount) || amount <= 0) {\n      alert(\"Please enter a valid positive amount.\");\n      return;\n    }\n    const res = await loadRazorpayScript();\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Please try again.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_lmkOFuIPmT2vi9\",\n      // Replace with your Razorpay API key\n      amount: amount * 100,\n      // Convert to smallest currency unit (e.g., paise for INR)\n      currency: \"INR\",\n      name: \"Health Chatbot Service\",\n      description: \"Chatbot Assistance Payment\",\n      handler: async function (response) {\n        setResponses(prevResponses => [...prevResponses, `Payment successful! Payment ID: ${response.razorpay_payment_id}`]);\n\n        // Fetch doctor suggestions again after successful payment\n        try {\n          const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              symptoms: userInput\n            }) // Use the existing user input for suggestions\n          });\n          if (!doctorResponse.ok) {\n            throw new Error(`Server error: ${doctorResponse.statusText}`);\n          }\n          const doctorData = await doctorResponse.json();\n          setResponses(prevResponses => [...prevResponses, doctorData.message || \"No response from doctor suggestion.\"]);\n        } catch (error) {\n          console.error(\"Error:\", error);\n          setResponses(prevResponses => [...prevResponses, `Error fetching doctor suggestions: ${error.message}`]);\n        }\n      },\n      prefill: {\n        name: \"CareLink\",\n        email: \"carelink@gmail.com\",\n        contact: \"9999999999\",\n        __prefill_vpa: \"success@razorpay\" // Razorpay's test UPI ID\n      },\n      theme: {\n        color: \"#3399cc\"\n      },\n      method: {\n        upi: true,\n        // Enable UPI\n        card: true,\n        // Enable card payments\n        netbanking: true,\n        // Enable net banking\n        wallet: true // Enable wallets like Paytm, etc.\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  };\n  const handlePaymentChange = e => {\n    const value = e.target.value;\n\n    // Validate input: Allow only positive numbers\n    if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n      setPaymentAmount(value); // Update state only if it's a valid number\n    }\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-cover bg-center\",\n      style: {\n        backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center mb-4 text-gray-800\",\n        children: \"\\uD83E\\uDD16 Health Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\",\n        ref: chatboxRef,\n        children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\",\n          children: response\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user-input\",\n          type: \"text\",\n          value: userInput,\n          onChange: handleUserInput,\n          placeholder: \"Type your symptoms...\",\n          className: \"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearChat,\n        className: \"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\",\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: paymentAmount,\n          onChange: handlePaymentChange // Updated to use new handler\n          ,\n          placeholder: \"Enter amount to pay\",\n          className: \"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\",\n          min: \"0\" // Prevent negative input in the input field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePayment,\n          className: \"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\",\n          children: \"Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 868,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 859,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"UQy4D6sGTUb6x4Ha+6z0Mic0gX4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","responses","setResponses","paymentAmount","setPaymentAmount","chatboxRef","welcomeMessage","inputField","document","getElementById","focus","loadRazorpayScript","Promise","resolve","script","createElement","src","onload","onerror","body","appendChild","handleUserInput","e","target","value","handleSend","trim","alert","console","log","prevResponses","response","fetch","method","headers","JSON","stringify","symptoms","ok","Error","status","data","json","message","error","handleClearChat","handlePayment","amount","parseFloat","isNaN","res","options","key","currency","name","description","handler","razorpay_payment_id","doctorResponse","statusText","doctorData","prefill","email","contact","__prefill_vpa","theme","color","upi","card","netbanking","wallet","paymentObject","window","Razorpay","open","handlePaymentChange","test","current","scrollTop","scrollHeight","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","id","type","onChange","placeholder","onClick","min","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//             try {\r\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                     method: \"POST\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                     body: JSON.stringify({ symptoms: userInput }),\r\n//                 });\r\n\r\n//                 if (!response.ok) {\r\n//                     throw new Error(`Server error: ${response.statusText}`);\r\n//                 }\r\n\r\n//                 const data = await response.json();\r\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n//             } catch (error) {\r\n//                 console.error(\"Error:\", error);\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Error: ${error.message || \"Unable to reach the backend.\"}`,\r\n//                 ]);\r\n//             }\r\n\r\n//             setUserInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const amount = parseFloat(paymentAmount); // Convert input to float\r\n\r\n//         // Validate amount\r\n//         if (isNaN(amount) || amount <= 0) {\r\n//             alert(\"Please enter a valid positive amount.\");\r\n//             return;\r\n//         }\r\n\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n//                 ]);\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//             method: {\r\n//                 upi: true,       // Enable UPI\r\n//                 card: true,      // Enable card payments\r\n//                 netbanking: true, // Enable net banking\r\n//                 wallet: true     // Enable wallets like Paytm, etc.\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     const handlePaymentChange = (e) => {\r\n//         const value = e.target.value;\r\n\r\n//         // Validate input: Allow only positive numbers\r\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n//             setPaymentAmount(value); // Update state only if it's a valid number\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 {/* Payment Input */}\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         type=\"number\"\r\n//                         value={paymentAmount}\r\n//                         onChange={handlePaymentChange} // Updated to use new handler\r\n//                         placeholder=\"Enter amount to pay\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                         min=\"0\" // Prevent negative input in the input field\r\n//                     />\r\n//                     <button\r\n//                         onClick={handlePayment}\r\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Make Payment\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//             try {\r\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                     method: \"POST\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                     body: JSON.stringify({ symptoms: userInput }),\r\n//                 });\r\n\r\n//                 if (!response.ok) {\r\n//                     throw new Error(`Server error: ${response.statusText}`);\r\n//                 }\r\n\r\n//                 const data = await response.json();\r\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n//             } catch (error) {\r\n//                 console.error(\"Error:\", error);\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Error: ${error.message || \"Unable to reach the backend.\"}`,\r\n//                 ]);\r\n//             }\r\n\r\n//             setUserInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const amount = parseFloat(paymentAmount); // Convert input to float\r\n\r\n//         // Validate amount\r\n//         if (isNaN(amount) || amount <= 0) {\r\n//             alert(\"Please enter a valid positive amount.\");\r\n//             return;\r\n//         }\r\n\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: async function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n//                 ]);\r\n\r\n//                 // Fetch doctor suggestions again after successful payment\r\n//                 try {\r\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                         method: \"POST\",\r\n//                         headers: {\r\n//                             \"Content-Type\": \"application/json\",\r\n//                         },\r\n//                         body: JSON.stringify({ symptoms: userInput }), // Use the existing user input for suggestions\r\n//                     });\r\n\r\n//                     if (!doctorResponse.ok) {\r\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n//                     }\r\n\r\n//                     const doctorData = await doctorResponse.json();\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         doctorData.message || \"No response from server.\",\r\n//                     ]);\r\n//                 } catch (error) {\r\n//                     console.error(\"Error:\", error);\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         `Error fetching doctor suggestion: ${error.message || \"Unable to reach the backend.\"}`,\r\n//                     ]);\r\n//                 }\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//             method: {\r\n//                 upi: true,       // Enable UPI\r\n//                 card: true,      // Enable card payments\r\n//                 netbanking: true, // Enable net banking\r\n//                 wallet: true     // Enable wallets like Paytm, etc.\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     const handlePaymentChange = (e) => {\r\n//         const value = e.target.value;\r\n\r\n//         // Validate input: Allow only positive numbers\r\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n//             setPaymentAmount(value); // Update state only if it's a valid number\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 {/* Payment Input */}\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         type=\"number\"\r\n//                         value={paymentAmount}\r\n//                         onChange={handlePaymentChange} // Updated to use new handler\r\n//                         placeholder=\"Enter amount to pay\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                         min=\"0\" // Prevent negative input in the input field\r\n//                     />\r\n//                     <button\r\n//                         onClick={handlePayment}\r\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Make Payment\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n// // Chatbot.js\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         // Log the user input\r\n//         console.log(\"User input before sending:\", userInput);\r\n        \r\n//         // Validate input\r\n//         if (userInput.trim() === \"\") {\r\n//             alert(\"Please enter your symptoms before sending.\");\r\n//             return;\r\n//         }\r\n\r\n//         // Update the responses state with the user's message\r\n//         setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//         try {\r\n//             const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify({ symptoms: userInput }), // Send the symptoms\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 throw new Error(`HTTP error! status: ${response.status}`);\r\n//             }\r\n\r\n//             const data = await response.json();\r\n//             setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error);\r\n//             setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\r\n//         }\r\n\r\n//         setUserInput(\"\"); // Clear the input after sending\r\n//     };\r\n\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const amount = parseFloat(paymentAmount); // Convert input to float\r\n\r\n//         // Validate amount\r\n//         if (isNaN(amount) || amount <= 0) {\r\n//             alert(\"Please enter a valid positive amount.\");\r\n//             return;\r\n//         }\r\n\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: async function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n//                 ]);\r\n\r\n//                 // Fetch doctor suggestions again after successful payment\r\n//                 try {\r\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                         method: \"POST\",\r\n//                         headers: {\r\n//                             \"Content-Type\": \"application/json\",\r\n//                         },\r\n//                         body: JSON.stringify({ symptoms: userInput }), // Use the existing user input for suggestions\r\n//                     });\r\n\r\n//                     if (!doctorResponse.ok) {\r\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n//                     }\r\n\r\n//                     const doctorData = await doctorResponse.json();\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         doctorData.message || \"No response from doctor suggestion.\",\r\n//                     ]);\r\n//                 } catch (error) {\r\n//                     console.error(\"Error:\", error);\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         `Error fetching doctor suggestions: ${error.message}`,\r\n//                     ]);\r\n//                 }\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//             method: {\r\n//                 upi: true,       // Enable UPI\r\n//                 card: true,      // Enable card payments\r\n//                 netbanking: true, // Enable net banking\r\n//                 wallet: true     // Enable wallets like Paytm, etc.\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     const handlePaymentChange = (e) => {\r\n//         const value = e.target.value;\r\n\r\n//         // Validate input: Allow only positive numbers\r\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n//             setPaymentAmount(value); // Update state only if it's a valid number\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 {/* Payment Input */}\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         type=\"number\"\r\n//                         value={paymentAmount}\r\n//                         onChange={handlePaymentChange} // Updated to use new handler\r\n//                         placeholder=\"Enter amount to pay\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                         min=\"0\" // Prevent negative input in the input field\r\n//                     />\r\n//                     <button\r\n//                         onClick={handlePayment}\r\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Make Payment\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Chatbot = () => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\r\n    const chatboxRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n\r\n        const inputField = document.getElementById(\"user-input\");\r\n        if (inputField) {\r\n            inputField.focus();\r\n        }\r\n    }, []);\r\n\r\n    const loadRazorpayScript = () => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n            script.onload = () => {\r\n                resolve(true);\r\n            };\r\n            script.onerror = () => {\r\n                resolve(false);\r\n            };\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    const handleUserInput = (e) => {\r\n        setUserInput(e.target.value);\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        // Validate input\r\n        if (userInput.trim() === \"\") {\r\n            alert(\"Please enter your symptoms before sending.\");\r\n            return;\r\n        }\r\n\r\n        // Log the user input\r\n        console.log(\"User input before sending:\", userInput);\r\n        \r\n        // Update the responses state with the user's message\r\n        setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ symptoms: userInput }), // Send the symptoms\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            setResponses((prevResponses) => [...prevResponses, `Error: ${error.message || \"Unable to reach the backend.\"}`]);\r\n        }\r\n\r\n        setUserInput(\"\"); // Clear the input after sending\r\n    };\r\n\r\n    const handleClearChat = () => {\r\n        setResponses([]);\r\n        setPaymentAmount(\"\"); // Clear payment amount on chat clear\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n    };\r\n\r\n    const handlePayment = async () => {\r\n        const amount = parseFloat(paymentAmount); // Convert input to float\r\n\r\n        // Validate amount\r\n        if (isNaN(amount) || amount <= 0) {\r\n            alert(\"Please enter a valid positive amount.\");\r\n            return;\r\n        }\r\n\r\n        const res = await loadRazorpayScript();\r\n\r\n        if (!res) {\r\n            alert(\"Razorpay SDK failed to load. Please try again.\");\r\n            return;\r\n        }\r\n\r\n        const options = {\r\n            key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n            amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\r\n            currency: \"INR\",\r\n            name: \"Health Chatbot Service\",\r\n            description: \"Chatbot Assistance Payment\",\r\n            handler: async function (response) {\r\n                setResponses((prevResponses) => [\r\n                    ...prevResponses,\r\n                    `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n                ]);\r\n\r\n                // Fetch doctor suggestions again after successful payment\r\n                try {\r\n                    const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({ symptoms: userInput }), // Use the existing user input for suggestions\r\n                    });\r\n\r\n                    if (!doctorResponse.ok) {\r\n                        throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n                    }\r\n\r\n                    const doctorData = await doctorResponse.json();\r\n                    setResponses((prevResponses) => [\r\n                        ...prevResponses,\r\n                        doctorData.message || \"No response from doctor suggestion.\",\r\n                    ]);\r\n                } catch (error) {\r\n                    console.error(\"Error:\", error);\r\n                    setResponses((prevResponses) => [\r\n                        ...prevResponses,\r\n                        `Error fetching doctor suggestions: ${error.message}`,\r\n                    ]);\r\n                }\r\n            },\r\n            prefill: {\r\n                name: \"CareLink\",\r\n                email: \"carelink@gmail.com\",\r\n                contact: \"9999999999\",\r\n                __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\r\n            },\r\n            theme: {\r\n                color: \"#3399cc\",\r\n            },\r\n            method: {\r\n                upi: true,       // Enable UPI\r\n                card: true,      // Enable card payments\r\n                netbanking: true, // Enable net banking\r\n                wallet: true     // Enable wallets like Paytm, etc.\r\n            },\r\n        };\r\n\r\n        const paymentObject = new window.Razorpay(options);\r\n        paymentObject.open();\r\n    };\r\n\r\n    const handlePaymentChange = (e) => {\r\n        const value = e.target.value;\r\n\r\n        // Validate input: Allow only positive numbers\r\n        if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n            setPaymentAmount(value); // Update state only if it's a valid number\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (chatboxRef.current) {\r\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n        }\r\n    }, [responses]);\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n            <div\r\n                className=\"absolute inset-0 bg-cover bg-center\"\r\n                style={{\r\n                    backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n                }}\r\n            >\r\n                <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n            </div>\r\n            <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n                <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n                <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n                    {responses.map((response, index) => (\r\n                        <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n                            {response}\r\n                        </p>\r\n                    ))}\r\n                </div>\r\n                <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n                    <input\r\n                        id=\"user-input\"\r\n                        type=\"text\"\r\n                        value={userInput}\r\n                        onChange={handleUserInput}\r\n                        placeholder=\"Type your symptoms...\"\r\n                        className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n                    />\r\n                    <button\r\n                        onClick={handleSend}\r\n                        className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    onClick={handleClearChat}\r\n                    className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                >\r\n                    Clear Chat\r\n                </button>\r\n                {/* Payment Input */}\r\n                <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n                    <input\r\n                        type=\"number\"\r\n                        value={paymentAmount}\r\n                        onChange={handlePaymentChange} // Updated to use new handler\r\n                        placeholder=\"Enter amount to pay\"\r\n                        className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n                        min=\"0\" // Prevent negative input in the input field\r\n                    />\r\n                    <button\r\n                        onClick={handlePayment}\r\n                        className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n                    >\r\n                        Pay\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAMa,UAAU,GAAGX,MAAM,CAAC,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ,MAAMa,cAAc,GAAG,+DAA+D;IACtFJ,YAAY,CAAC,CAACI,cAAc,CAAC,CAAC;IAE9B,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IACxD,IAAIF,UAAU,EAAE;MACZA,UAAU,CAACG,KAAK,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}