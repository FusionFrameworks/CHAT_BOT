{"ast":null,"code":"// api.jsauth\nconst API_BASE_URL = 'http://localhost:3001/api/';\n\n/**\r\n * Registers a new user.\r\n * @param {Object} userData - The user data for registration.\r\n * @returns {Promise<Object>} - The response from the server.\r\n */\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Registration failed:', error);\n    return {\n      message: 'Registration failed'\n    };\n  }\n};\n\n/**\r\n * Sends an OTP to the user's mobile number.\r\n * @param {string} mobileNumber - The user's mobile number.\r\n * @returns {Promise<Object>} - The response from the server.\r\n */\nexport const sendOtp = async mobileNumber => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mobileNumber\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Sending OTP failed:', error);\n    return {\n      message: 'Sending OTP failed'\n    };\n  }\n};\n\n/**\r\n * Verifies the OTP sent to the user's mobile number.\r\n * @param {string} mobileNumber - The user's mobile number.\r\n * @param {string} otp - The OTP to verify.\r\n * @returns {Promise<Object>} - The response from the server.\r\n */\nexport const verifyOtp = async (mobileNumber, otp) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/verify-otp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mobileNumber,\n        otp\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('OTP verification failed:', error);\n    return {\n      message: 'OTP verification failed'\n    };\n  }\n};","map":{"version":3,"names":["API_BASE_URL","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","json","error","console","message","sendOtp","mobileNumber","verifyOtp","otp"],"sources":["D:/ChatBot/chatbot-frontend/src/api.js"],"sourcesContent":["// api.jsauth\r\nconst API_BASE_URL = 'http://localhost:3001/api/';\r\n\r\n/**\r\n * Registers a new user.\r\n * @param {Object} userData - The user data for registration.\r\n * @returns {Promise<Object>} - The response from the server.\r\n */\r\nexport const registerUser = async (userData) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/register`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(userData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.status} - ${response.statusText}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Registration failed:', error);\r\n        return { message: 'Registration failed' };\r\n    }\r\n};\r\n\r\n/**\r\n * Sends an OTP to the user's mobile number.\r\n * @param {string} mobileNumber - The user's mobile number.\r\n * @returns {Promise<Object>} - The response from the server.\r\n */\r\nexport const sendOtp = async (mobileNumber) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ mobileNumber }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.status} - ${response.statusText}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Sending OTP failed:', error);\r\n        return { message: 'Sending OTP failed' };\r\n    }\r\n};\r\n\r\n/**\r\n * Verifies the OTP sent to the user's mobile number.\r\n * @param {string} mobileNumber - The user's mobile number.\r\n * @param {string} otp - The OTP to verify.\r\n * @returns {Promise<Object>} - The response from the server.\r\n */\r\nexport const verifyOtp = async (mobileNumber, otp) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/verify-otp`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ mobileNumber, otp }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.status} - ${response.statusText}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('OTP verification failed:', error);\r\n        return { message: 'OTP verification failed' };\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,4BAA4B;;AAEjD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,EAAE;MACrDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IACjC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,UAAUR,QAAQ,CAACS,MAAM,MAAMT,QAAQ,CAACU,UAAU,EAAE,CAAC;IACzE;IAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MAAEE,OAAO,EAAE;IAAsB,CAAC;EAC7C;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,YAAY,IAAK;EAC3C,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,EAAE;MAClDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEU;MAAa,CAAC;IACzC,CAAC,CAAC;IAEF,IAAI,CAAChB,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,UAAUR,QAAQ,CAACS,MAAM,MAAMT,QAAQ,CAACU,UAAU,EAAE,CAAC;IACzE;IAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO;MAAEE,OAAO,EAAE;IAAqB,CAAC;EAC5C;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAOD,YAAY,EAAEE,GAAG,KAAK;EAClD,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,aAAa,EAAE;MACvDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEU,YAAY;QAAEE;MAAI,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,UAAUR,QAAQ,CAACS,MAAM,MAAMT,QAAQ,CAACU,UAAU,EAAE,CAAC;IACzE;IAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO;MAAEE,OAAO,EAAE;IAA0B,CAAC;EACjD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}