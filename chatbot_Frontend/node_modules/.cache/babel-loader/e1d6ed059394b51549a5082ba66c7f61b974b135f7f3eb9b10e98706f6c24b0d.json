{"ast":null,"code":"var _jsxFileName = \"/home/pradyumna/Documents/CHAT_BOT/chatbot_Frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [storedSymptoms, setStoredSymptoms] = useState(\"\");\n  const [consultationFee, setConsultationFee] = useState(null);\n  const chatboxRef = useRef();\n  useEffect(() => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([{\n      text: welcomeMessage,\n      sender: \"bot\"\n    }]);\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n  }, []);\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => {\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  };\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (userInput.trim() === \"\") {\n      alert(\"Please enter your symptoms before sending.\");\n      return;\n    }\n    setResponses(prevResponses => [...prevResponses, {\n      text: `You said: ${userInput}`,\n      sender: \"user\"\n    }]);\n    setStoredSymptoms(userInput);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms: userInput\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResponses(prevResponses => [...prevResponses, {\n        text: data.message || \"No response from server.\",\n        sender: \"bot\"\n      }]);\n      const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\n      if (feeMatch) {\n        setConsultationFee(parseFloat(feeMatch[0]));\n      }\n    } catch (error) {\n      setResponses(prevResponses => [...prevResponses, {\n        text: `Error: ${error.message || \"Unable to reach the backend.\"}`,\n        sender: \"bot\"\n      }]);\n    }\n    setUserInput(\"\");\n  };\n  const handleClearChat = () => {\n    setResponses([]);\n    setPaymentAmount(\"\");\n    setStoredSymptoms(\"\");\n    setConsultationFee(null);\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([{\n      text: welcomeMessage,\n      sender: \"bot\"\n    }]);\n  };\n  const handlePayment = async () => {\n    const amount = parseFloat(paymentAmount);\n    if (isNaN(amount) || amount <= 0) {\n      alert(\"Please enter a valid positive amount.\");\n      return;\n    }\n    if (consultationFee === null || amount !== consultationFee) {\n      alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\n      return;\n    }\n    const res = await loadRazorpayScript();\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Please try again.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_lmkOFuIPmT2vi9\",\n      amount: amount * 100,\n      currency: \"INR\",\n      name: \"Health Chatbot Service\",\n      description: \"Chatbot Assistance Payment\",\n      handler: async function (response) {\n        const paymentId = response.razorpay_payment_id;\n\n        // Display payment success message in chatbot\n        setResponses(prevResponses => [...prevResponses, {\n          text: `Payment successful! Payment ID: ${paymentId}`,\n          sender: \"bot\"\n        }]);\n\n        // try {\n        // Fetch patientId and name from the session using the get-session API\n        const sessionResponse = await axios.get(\"/get-session\");\n        if (sessionResponse.status === 200) {\n          const {\n            patientId,\n            name\n          } = sessionResponse.data;\n\n          // Send payment ID, patientId, and name to Node.js API\n          await axios.post(\"/api/auth/store-payment\", {\n            paymentId: paymentId,\n            status: \"completed\",\n            patientId: patientId,\n            // Including patientId\n            name: name // Including name\n          });\n          console.log(`Payment ID ${paymentId} sent successfully to Node.js API.`);\n\n          // Fetch doctor suggestions\n          const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              symptoms: storedSymptoms,\n              payment_status: true\n            })\n          });\n          if (!doctorResponse.ok) {\n            throw new Error(`Server error: ${doctorResponse.statusText}`);\n          }\n          const doctorData = await doctorResponse.json();\n          setResponses(prevResponses => [...prevResponses, {\n            text: doctorData.message || \"No response from doctor suggestion.\",\n            sender: \"bot\"\n          }]);\n        } else {\n          throw new Error(\"Session data not found. Please log in first.\");\n        }\n\n        // } catch (error) {\n        //     setResponses((prevResponses) => [\n        //         ...prevResponses,\n        //         { text: `Error: ${error.message}`, sender: \"bot\" },\n        //     ]);\n        //     console.error(\"Error during payment or doctor suggestion flow:\", error);\n        // }\n      },\n      prefill: {\n        name: \"CareLink\",\n        email: \"carelink@gmail.com\",\n        contact: \"9999999999\",\n        __prefill_vpa: \"success@razorpay\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      },\n      method: {\n        upi: true,\n        card: true,\n        netbanking: true,\n        wallet: true\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  };\n  const handlePaymentChange = e => {\n    const value = e.target.value;\n    if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n      setPaymentAmount(value);\n    }\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-cover bg-center\",\n      style: {\n        backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center mb-4 text-gray-800\",\n        children: \"\\uD83E\\uDD16 Health Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\",\n        ref: chatboxRef,\n        children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `p-3 rounded-2xl max-w-xs shadow-lg ${response.sender === \"user\" ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\" : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"}`,\n            style: {\n              animationDelay: `${index * 0.1}s`\n            },\n            children: response.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user-input\",\n          type: \"text\",\n          value: userInput,\n          onChange: handleUserInput,\n          placeholder: \"Type your symptoms...\",\n          className: \"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearChat,\n        className: \"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\",\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-gray-800\",\n          children: \"\\uD83D\\uDCB3 Make a Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: paymentAmount,\n          onChange: handlePaymentChange,\n          placeholder: \"Enter consultation fee\",\n          className: \"border border-gray-300 rounded-lg p-2 w-full mt-2 focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-300 shadow-md hover:shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePayment,\n          className: \"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\",\n          children: \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"Yxh7ahjtqA1HZNQ+gqdg1thwSHc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","responses","setResponses","paymentAmount","setPaymentAmount","storedSymptoms","setStoredSymptoms","consultationFee","setConsultationFee","chatboxRef","welcomeMessage","text","sender","inputField","document","getElementById","focus","loadRazorpayScript","Promise","resolve","script","createElement","src","onload","onerror","body","appendChild","handleUserInput","e","target","value","handleSend","trim","alert","prevResponses","response","fetch","method","headers","JSON","stringify","symptoms","ok","Error","status","data","json","message","feeMatch","match","parseFloat","error","handleClearChat","handlePayment","amount","isNaN","res","options","key","currency","name","description","handler","paymentId","razorpay_payment_id","sessionResponse","get","patientId","post","console","log","doctorResponse","payment_status","statusText","doctorData","prefill","email","contact","__prefill_vpa","theme","color","upi","card","netbanking","wallet","paymentObject","window","Razorpay","open","handlePaymentChange","test","current","scrollTop","scrollHeight","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","animationDelay","id","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/pradyumna/Documents/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nconst Chatbot = () => {\n    const [userInput, setUserInput] = useState(\"\");\n    const [responses, setResponses] = useState([]);\n    const [paymentAmount, setPaymentAmount] = useState(\"\");\n    const [storedSymptoms, setStoredSymptoms] = useState(\"\");\n    const [consultationFee, setConsultationFee] = useState(null);\n    const chatboxRef = useRef();\n\n    useEffect(() => {\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n        setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\n        \n        const inputField = document.getElementById(\"user-input\");\n        if (inputField) {\n            inputField.focus();\n        }\n    }, []);\n\n    const loadRazorpayScript = () => {\n        return new Promise((resolve) => {\n            const script = document.createElement(\"script\");\n            script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n            script.onload = () => {\n                resolve(true);\n            };\n            script.onerror = () => {\n                resolve(false);\n            };\n            document.body.appendChild(script);\n        });\n    };\n\n    const handleUserInput = (e) => {\n        setUserInput(e.target.value);\n    };\n\n    const handleSend = async () => {\n        if (userInput.trim() === \"\") {\n            alert(\"Please enter your symptoms before sending.\");\n            return;\n        }\n\n        setResponses((prevResponses) => [\n            ...prevResponses, \n            { text: `You said: ${userInput}`, sender: \"user\" }\n        ]);\n        setStoredSymptoms(userInput);\n\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ symptoms: userInput }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            setResponses((prevResponses) => [\n                ...prevResponses, \n                { text: data.message || \"No response from server.\", sender: \"bot\" }\n            ]);\n\n            const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\n            if (feeMatch) {\n                setConsultationFee(parseFloat(feeMatch[0]));\n            }\n        } catch (error) {\n            setResponses((prevResponses) => [\n                ...prevResponses, \n                { text: `Error: ${error.message || \"Unable to reach the backend.\"}`, sender: \"bot\" }\n            ]);\n        }\n\n        setUserInput(\"\");\n    };\n\n    const handleClearChat = () => {\n        setResponses([]);\n        setPaymentAmount(\"\");\n        setStoredSymptoms(\"\");\n        setConsultationFee(null);\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n        setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\n    };\n\n    const handlePayment = async () => {\n        const amount = parseFloat(paymentAmount);\n\n        if (isNaN(amount) || amount <= 0) {\n            alert(\"Please enter a valid positive amount.\");\n            return;\n        }\n\n        if (consultationFee === null || amount !== consultationFee) {\n            alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\n            return;\n        }\n\n        const res = await loadRazorpayScript();\n\n        if (!res) {\n            alert(\"Razorpay SDK failed to load. Please try again.\");\n            return;\n        }\n\n        const options = {\n            key: \"rzp_test_lmkOFuIPmT2vi9\",\n            amount: amount * 100,\n            currency: \"INR\",\n            name: \"Health Chatbot Service\",\n            description: \"Chatbot Assistance Payment\",\n            handler: async function (response) {\n                const paymentId = response.razorpay_payment_id;\n            \n                // Display payment success message in chatbot\n                setResponses((prevResponses) => [\n                    ...prevResponses,\n                    { text: `Payment successful! Payment ID: ${paymentId}`, sender: \"bot\" },\n                ]);\n            \n                // try {\n                    // Fetch patientId and name from the session using the get-session API\n                    const sessionResponse = await axios.get(\"/get-session\");\n            \n                    if (sessionResponse.status === 200) {\n                        const { patientId, name } = sessionResponse.data;\n            \n                        // Send payment ID, patientId, and name to Node.js API\n                        await axios.post(\"/api/auth/store-payment\", {\n                            paymentId: paymentId,\n                            status: \"completed\",\n                            patientId: patientId,  // Including patientId\n                            name: name             // Including name\n                        });\n            \n                        console.log(`Payment ID ${paymentId} sent successfully to Node.js API.`);\n            \n                        // Fetch doctor suggestions\n                        const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true }),\n                        });\n            \n                        if (!doctorResponse.ok) {\n                            throw new Error(`Server error: ${doctorResponse.statusText}`);\n                        }\n            \n                        const doctorData = await doctorResponse.json();\n                        setResponses((prevResponses) => [\n                            ...prevResponses,\n                            { text: doctorData.message || \"No response from doctor suggestion.\", sender: \"bot\" },\n                        ]);\n                    } else {\n                        throw new Error(\"Session data not found. Please log in first.\");\n                    }\n            \n                // } catch (error) {\n                //     setResponses((prevResponses) => [\n                //         ...prevResponses,\n                //         { text: `Error: ${error.message}`, sender: \"bot\" },\n                //     ]);\n                //     console.error(\"Error during payment or doctor suggestion flow:\", error);\n                // }\n            },                    \n            prefill: {\n                name: \"CareLink\",\n                email: \"carelink@gmail.com\",\n                contact: \"9999999999\",\n                __prefill_vpa: \"success@razorpay\",\n            },\n            theme: {\n                color: \"#3399cc\",\n            },\n            method: {\n                upi: true,\n                card: true,\n                netbanking: true,\n                wallet: true,\n            },\n        };     \n\n        const paymentObject = new window.Razorpay(options);\n        paymentObject.open();\n    };\n\n    const handlePaymentChange = (e) => {\n        const value = e.target.value;\n        if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n            setPaymentAmount(value);\n        }\n    };\n\n    useEffect(() => {\n        if (chatboxRef.current) {\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n        }\n    }, [responses]);\n\n    return (\n        <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n            <div\n                className=\"absolute inset-0 bg-cover bg-center\"\n                style={{\n                    backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n                }}\n            >\n                <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n            </div>\n            <div className=\"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n                <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n                <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n                    {responses.map((response, index) => (\n                        <div\n                            key={index}\n                            className={`flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\n                        >\n                            <div\n                                className={`p-3 rounded-2xl max-w-xs shadow-lg ${\n                                    response.sender === \"user\"\n                                        ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\"\n                                        : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"\n                                }`}\n                                style={{ animationDelay: `${index * 0.1}s` }}\n                            >\n                                {response.text}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n                    <input\n                        id=\"user-input\"\n                        type=\"text\"\n                        value={userInput}\n                        onChange={handleUserInput}\n                        placeholder=\"Type your symptoms...\"\n                        className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n                    />\n                    <button\n                        onClick={handleSend}\n                        className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n                    >\n                        Send\n                    </button>\n                </div>\n                <button\n                    onClick={handleClearChat}\n                    className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\"\n                >\n                    Clear Chat\n                </button>\n                <div className=\"mt-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-800\">ðŸ’³ Make a Payment</h3>\n                    <input\n                        type=\"text\"\n                        value={paymentAmount}\n                        onChange={handlePaymentChange}\n                        placeholder=\"Enter consultation fee\"\n                        className=\"border border-gray-300 rounded-lg p-2 w-full mt-2 focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-300 shadow-md hover:shadow-lg\"\n                    />\n                    <button\n                        onClick={handlePayment}\n                        className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n                    >\n                        Pay Now\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbot;\n\n\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMkB,UAAU,GAAGhB,MAAM,CAAC,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ,MAAMkB,cAAc,GAAG,+DAA+D;IACtFR,YAAY,CAAC,CAAC;MAAES,IAAI,EAAED,cAAc;MAAEE,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;IAEvD,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IACxD,IAAIF,UAAU,EAAE;MACZA,UAAU,CAACG,KAAK,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC5B,MAAMC,MAAM,GAAGN,QAAQ,CAACO,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,GAAG,GAAG,8CAA8C;MAC3DF,MAAM,CAACG,MAAM,GAAG,MAAM;QAClBJ,OAAO,CAAC,IAAI,CAAC;MACjB,CAAC;MACDC,MAAM,CAACI,OAAO,GAAG,MAAM;QACnBL,OAAO,CAAC,KAAK,CAAC;MAClB,CAAC;MACDL,QAAQ,CAACW,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC;IACrC,CAAC,CAAC;EACN,CAAC;EAED,MAAMO,eAAe,GAAIC,CAAC,IAAK;IAC3B5B,YAAY,CAAC4B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAIhC,SAAS,CAACiC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzBC,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACJ;IAEA/B,YAAY,CAAEgC,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB;MAAEvB,IAAI,EAAE,aAAaZ,SAAS,EAAE;MAAEa,MAAM,EAAE;IAAO,CAAC,CACrD,CAAC;IACFN,iBAAiB,CAACP,SAAS,CAAC;IAE5B,IAAI;MACA,MAAMoC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDb,IAAI,EAAEc,IAAI,CAACC,SAAS,CAAC;UAAEC,QAAQ,EAAE1C;QAAU,CAAC;MAChD,CAAC,CAAC;MAEF,IAAI,CAACoC,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC7D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC5C,YAAY,CAAEgC,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB;QAAEvB,IAAI,EAAEkC,IAAI,CAACE,OAAO,IAAI,0BAA0B;QAAEnC,MAAM,EAAE;MAAM,CAAC,CACtE,CAAC;MAEF,MAAMoC,QAAQ,GAAGH,IAAI,CAACE,OAAO,CAACE,KAAK,CAAC,eAAe,CAAC;MACpD,IAAID,QAAQ,EAAE;QACVxC,kBAAkB,CAAC0C,UAAU,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZjD,YAAY,CAAEgC,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB;QAAEvB,IAAI,EAAE,UAAUwC,KAAK,CAACJ,OAAO,IAAI,8BAA8B,EAAE;QAAEnC,MAAM,EAAE;MAAM,CAAC,CACvF,CAAC;IACN;IAEAZ,YAAY,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMoD,eAAe,GAAGA,CAAA,KAAM;IAC1BlD,YAAY,CAAC,EAAE,CAAC;IAChBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,kBAAkB,CAAC,IAAI,CAAC;IACxB,MAAME,cAAc,GAAG,+DAA+D;IACtFR,YAAY,CAAC,CAAC;MAAES,IAAI,EAAED,cAAc;MAAEE,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMyC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,MAAM,GAAGJ,UAAU,CAAC/C,aAAa,CAAC;IAExC,IAAIoD,KAAK,CAACD,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC,EAAE;MAC9BrB,KAAK,CAAC,uCAAuC,CAAC;MAC9C;IACJ;IAEA,IAAI1B,eAAe,KAAK,IAAI,IAAI+C,MAAM,KAAK/C,eAAe,EAAE;MACxD0B,KAAK,CAAC,kDAAkD1B,eAAe,GAAG,CAAC;MAC3E;IACJ;IAEA,MAAMiD,GAAG,GAAG,MAAMvC,kBAAkB,CAAC,CAAC;IAEtC,IAAI,CAACuC,GAAG,EAAE;MACNvB,KAAK,CAAC,gDAAgD,CAAC;MACvD;IACJ;IAEA,MAAMwB,OAAO,GAAG;MACZC,GAAG,EAAE,yBAAyB;MAC9BJ,MAAM,EAAEA,MAAM,GAAG,GAAG;MACpBK,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE,wBAAwB;MAC9BC,WAAW,EAAE,4BAA4B;MACzCC,OAAO,EAAE,eAAAA,CAAgB3B,QAAQ,EAAE;QAC/B,MAAM4B,SAAS,GAAG5B,QAAQ,CAAC6B,mBAAmB;;QAE9C;QACA9D,YAAY,CAAEgC,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB;UAAEvB,IAAI,EAAE,mCAAmCoD,SAAS,EAAE;UAAEnD,MAAM,EAAE;QAAM,CAAC,CAC1E,CAAC;;QAEF;QACI;QACA,MAAMqD,eAAe,GAAG,MAAMvE,KAAK,CAACwE,GAAG,CAAC,cAAc,CAAC;QAEvD,IAAID,eAAe,CAACrB,MAAM,KAAK,GAAG,EAAE;UAChC,MAAM;YAAEuB,SAAS;YAAEP;UAAK,CAAC,GAAGK,eAAe,CAACpB,IAAI;;UAEhD;UACA,MAAMnD,KAAK,CAAC0E,IAAI,CAAC,yBAAyB,EAAE;YACxCL,SAAS,EAAEA,SAAS;YACpBnB,MAAM,EAAE,WAAW;YACnBuB,SAAS,EAAEA,SAAS;YAAG;YACvBP,IAAI,EAAEA,IAAI,CAAa;UAC3B,CAAC,CAAC;UAEFS,OAAO,CAACC,GAAG,CAAC,cAAcP,SAAS,oCAAoC,CAAC;;UAExE;UACA,MAAMQ,cAAc,GAAG,MAAMnC,KAAK,CAAC,sCAAsC,EAAE;YACvEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDb,IAAI,EAAEc,IAAI,CAACC,SAAS,CAAC;cAAEC,QAAQ,EAAEpC,cAAc;cAAEmE,cAAc,EAAE;YAAK,CAAC;UAC3E,CAAC,CAAC;UAEF,IAAI,CAACD,cAAc,CAAC7B,EAAE,EAAE;YACpB,MAAM,IAAIC,KAAK,CAAC,iBAAiB4B,cAAc,CAACE,UAAU,EAAE,CAAC;UACjE;UAEA,MAAMC,UAAU,GAAG,MAAMH,cAAc,CAACzB,IAAI,CAAC,CAAC;UAC9C5C,YAAY,CAAEgC,aAAa,IAAK,CAC5B,GAAGA,aAAa,EAChB;YAAEvB,IAAI,EAAE+D,UAAU,CAAC3B,OAAO,IAAI,qCAAqC;YAAEnC,MAAM,EAAE;UAAM,CAAC,CACvF,CAAC;QACN,CAAC,MAAM;UACH,MAAM,IAAI+B,KAAK,CAAC,8CAA8C,CAAC;QACnE;;QAEJ;QACA;QACA;QACA;QACA;QACA;QACA;MACJ,CAAC;MACDgC,OAAO,EAAE;QACLf,IAAI,EAAE,UAAU;QAChBgB,KAAK,EAAE,oBAAoB;QAC3BC,OAAO,EAAE,YAAY;QACrBC,aAAa,EAAE;MACnB,CAAC;MACDC,KAAK,EAAE;QACHC,KAAK,EAAE;MACX,CAAC;MACD3C,MAAM,EAAE;QACJ4C,GAAG,EAAE,IAAI;QACTC,IAAI,EAAE,IAAI;QACVC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACZ;IACJ,CAAC;IAED,MAAMC,aAAa,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAAC9B,OAAO,CAAC;IAClD4B,aAAa,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMC,mBAAmB,GAAI7D,CAAC,IAAK;IAC/B,MAAME,KAAK,GAAGF,CAAC,CAACC,MAAM,CAACC,KAAK;IAC5B,IAAIA,KAAK,KAAK,EAAE,IAAI,mBAAmB,CAAC4D,IAAI,CAAC5D,KAAK,CAAC,EAAE;MACjD1B,gBAAgB,CAAC0B,KAAK,CAAC;IAC3B;EACJ,CAAC;EAEDtC,SAAS,CAAC,MAAM;IACZ,IAAIiB,UAAU,CAACkF,OAAO,EAAE;MACpBlF,UAAU,CAACkF,OAAO,CAACC,SAAS,GAAGnF,UAAU,CAACkF,OAAO,CAACE,YAAY;IAClE;EACJ,CAAC,EAAE,CAAC5F,SAAS,CAAC,CAAC;EAEf,oBACIL,OAAA;IAAKkG,SAAS,EAAC,wEAAwE;IAAAC,QAAA,gBACnFnG,OAAA;MACIkG,SAAS,EAAC,qCAAqC;MAC/CE,KAAK,EAAE;QACHC,eAAe,EAAE;MACrB,CAAE;MAAAF,QAAA,eAEFnG,OAAA;QAAKkG,SAAS,EAAC;MAAuD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC,eACNzG,OAAA;MAAKkG,SAAS,EAAC,6KAA6K;MAAAC,QAAA,gBACxLnG,OAAA;QAAIkG,SAAS,EAAC,uDAAuD;QAAAC,QAAA,EAAC;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5FzG,OAAA;QAAKkG,SAAS,EAAC,6FAA6F;QAACQ,GAAG,EAAE7F,UAAW;QAAAsF,QAAA,EACxH9F,SAAS,CAACsG,GAAG,CAAC,CAACpE,QAAQ,EAAEqE,KAAK,kBAC3B5G,OAAA;UAEIkG,SAAS,EAAE,QAAQ3D,QAAQ,CAACvB,MAAM,KAAK,MAAM,GAAG,aAAa,GAAG,eAAe,uBAAwB;UAAAmF,QAAA,eAEvGnG,OAAA;YACIkG,SAAS,EAAE,sCACP3D,QAAQ,CAACvB,MAAM,KAAK,MAAM,GACpB,uEAAuE,GACvE,0EAA0E,EACjF;YACHoF,KAAK,EAAE;cAAES,cAAc,EAAE,GAAGD,KAAK,GAAG,GAAG;YAAI,CAAE;YAAAT,QAAA,EAE5C5D,QAAQ,CAACxB;UAAI;YAAAuF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb;QAAC,GAZDG,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaT,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNzG,OAAA;QAAKkG,SAAS,EAAC,oEAAoE;QAAAC,QAAA,gBAC/EnG,OAAA;UACI8G,EAAE,EAAC,YAAY;UACfC,IAAI,EAAC,MAAM;UACX7E,KAAK,EAAE/B,SAAU;UACjB6G,QAAQ,EAAEjF,eAAgB;UAC1BkF,WAAW,EAAC,uBAAuB;UACnCf,SAAS,EAAC;QAAoJ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjK,CAAC,eACFzG,OAAA;UACIkH,OAAO,EAAE/E,UAAW;UACpB+D,SAAS,EAAC,qHAAqH;UAAAC,QAAA,EAClI;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACNzG,OAAA;QACIkH,OAAO,EAAE1D,eAAgB;QACzB0C,SAAS,EAAC,qGAAqG;QAAAC,QAAA,EAClH;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTzG,OAAA;QAAKkG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACjBnG,OAAA;UAAIkG,SAAS,EAAC,qCAAqC;UAAAC,QAAA,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1EzG,OAAA;UACI+G,IAAI,EAAC,MAAM;UACX7E,KAAK,EAAE3B,aAAc;UACrByG,QAAQ,EAAEnB,mBAAoB;UAC9BoB,WAAW,EAAC,wBAAwB;UACpCf,SAAS,EAAC;QAA0J;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvK,CAAC,eACFzG,OAAA;UACIkH,OAAO,EAAEzD,aAAc;UACvByC,SAAS,EAAC,mIAAmI;UAAAC,QAAA,EAChJ;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACvG,EAAA,CAtRID,OAAO;AAAAkH,EAAA,GAAPlH,OAAO;AAwRb,eAAeA,OAAO;AAAC,IAAAkH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}