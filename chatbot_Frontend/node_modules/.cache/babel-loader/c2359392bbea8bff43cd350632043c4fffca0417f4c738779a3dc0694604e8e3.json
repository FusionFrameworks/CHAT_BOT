{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Assistants\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KnowledgeStatusListInstance = exports.KnowledgeStatusInstance = exports.KnowledgeStatusContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nclass KnowledgeStatusContextImpl {\n  constructor(_version, id) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(id)) {\n      throw new Error(\"Parameter 'id' is not valid.\");\n    }\n    this._solution = {\n      id\n    };\n    this._uri = `/Knowledge/${id}/Status`;\n  }\n  fetch(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\"\n      });\n    operationPromise = operationPromise.then(payload => new KnowledgeStatusInstance(operationVersion, payload, instance._solution.id));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.KnowledgeStatusContextImpl = KnowledgeStatusContextImpl;\nclass KnowledgeStatusInstance {\n  constructor(_version, payload, id) {\n    this._version = _version;\n    this.accountSid = payload.account_sid;\n    this.status = payload.status;\n    this.lastStatus = payload.last_status;\n    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n    this._solution = {\n      id\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new KnowledgeStatusContextImpl(this._version, this._solution.id);\n    return this._context;\n  }\n  /**\n   * Fetch a KnowledgeStatusInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed KnowledgeStatusInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      accountSid: this.accountSid,\n      status: this.status,\n      lastStatus: this.lastStatus,\n      dateUpdated: this.dateUpdated\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.KnowledgeStatusInstance = KnowledgeStatusInstance;\nfunction KnowledgeStatusListInstance(version, id) {\n  if (!(0, utility_1.isValidPathParam)(id)) {\n    throw new Error(\"Parameter 'id' is not valid.\");\n  }\n  const instance = () => instance.get();\n  instance.get = function get() {\n    return new KnowledgeStatusContextImpl(version, id);\n  };\n  instance._version = version;\n  instance._solution = {\n    id\n  };\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.KnowledgeStatusListInstance = KnowledgeStatusListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","KnowledgeStatusListInstance","KnowledgeStatusInstance","KnowledgeStatusContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","id","isValidPathParam","Error","_solution","_uri","fetch","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","toJSON","inspect","custom","_depth","options","accountSid","account_sid","status","lastStatus","last_status","dateUpdated","iso8601DateTime","date_updated","_proxy","_context","version","get","inspectImpl"],"sources":["D:/CHAT_BOT/chatbot_Frontend/node_modules/twilio/lib/rest/assistants/v1/knowledge/knowledgeStatus.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Assistants\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KnowledgeStatusListInstance = exports.KnowledgeStatusInstance = exports.KnowledgeStatusContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../../base/deserialize\");\nconst serialize = require(\"../../../../base/serialize\");\nconst utility_1 = require(\"../../../../base/utility\");\nclass KnowledgeStatusContextImpl {\n    constructor(_version, id) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(id)) {\n            throw new Error(\"Parameter 'id' is not valid.\");\n        }\n        this._solution = { id };\n        this._uri = `/Knowledge/${id}/Status`;\n    }\n    fetch(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n        });\n        operationPromise = operationPromise.then((payload) => new KnowledgeStatusInstance(operationVersion, payload, instance._solution.id));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.KnowledgeStatusContextImpl = KnowledgeStatusContextImpl;\nclass KnowledgeStatusInstance {\n    constructor(_version, payload, id) {\n        this._version = _version;\n        this.accountSid = payload.account_sid;\n        this.status = payload.status;\n        this.lastStatus = payload.last_status;\n        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n        this._solution = { id };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new KnowledgeStatusContextImpl(this._version, this._solution.id);\n        return this._context;\n    }\n    /**\n     * Fetch a KnowledgeStatusInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed KnowledgeStatusInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            accountSid: this.accountSid,\n            status: this.status,\n            lastStatus: this.lastStatus,\n            dateUpdated: this.dateUpdated,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.KnowledgeStatusInstance = KnowledgeStatusInstance;\nfunction KnowledgeStatusListInstance(version, id) {\n    if (!(0, utility_1.isValidPathParam)(id)) {\n        throw new Error(\"Parameter 'id' is not valid.\");\n    }\n    const instance = (() => instance.get());\n    instance.get = function get() {\n        return new KnowledgeStatusContextImpl(version, id);\n    };\n    instance._version = version;\n    instance._solution = { id };\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.KnowledgeStatusListInstance = KnowledgeStatusListInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}