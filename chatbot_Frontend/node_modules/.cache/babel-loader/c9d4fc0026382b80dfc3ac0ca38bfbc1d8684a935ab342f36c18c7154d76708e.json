{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         // Welcoming message\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         // Auto-focus on the input field when the component mounts\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//             try {\n//                 const response = await fetch(\"http://localhost:5000/suggest_doctor\", {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                     body: JSON.stringify({ symptoms: userInput }),\n//                 });\n\n//                 const data = await response.json();\n//                 setResponses((prevResponses) => [...prevResponses, data.message]);\n//             } catch (error) {\n//                 console.error(\"Error:\", error);\n//                 setResponses((prevResponses) => [...prevResponses, \"Error: Unable to reach the backend.\"]);\n//             }\n\n//             setUserInput(\"\"); // Clear input after sending\n//         }\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-r from-green-400 to-blue-500\">\n//             <div className=\"chatbot-container max-w-md p-6 bg-white rounded-lg shadow-xl border border-gray-200 mt-10 transform transition-transform hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex mt-4 space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-l-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-r-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button onClick={handleClearChat} className=\"bg-red-600 text-white rounded p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\">\n//                     Clear Chat\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;","map":{"version":3,"names":[],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         // Welcoming message\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         // Auto-focus on the input field when the component mounts\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//             try {\r\n//                 const response = await fetch(\"http://localhost:5000/suggest_doctor\", {\r\n//                     method: \"POST\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                     body: JSON.stringify({ symptoms: userInput }),\r\n//                 });\r\n\r\n//                 const data = await response.json();\r\n//                 setResponses((prevResponses) => [...prevResponses, data.message]);\r\n//             } catch (error) {\r\n//                 console.error(\"Error:\", error);\r\n//                 setResponses((prevResponses) => [...prevResponses, \"Error: Unable to reach the backend.\"]);\r\n//             }\r\n\r\n//             setUserInput(\"\"); // Clear input after sending\r\n//         }\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-r from-green-400 to-blue-500\">\r\n//             <div className=\"chatbot-container max-w-md p-6 bg-white rounded-lg shadow-xl border border-gray-200 mt-10 transform transition-transform hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex mt-4 space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-l-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-r-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button onClick={handleClearChat} className=\"bg-red-600 text-white rounded p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\">\r\n//                     Clear Chat\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}