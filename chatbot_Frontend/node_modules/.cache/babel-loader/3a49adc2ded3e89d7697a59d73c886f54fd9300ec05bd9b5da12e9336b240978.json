{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n\n// const labTests = [\n//   { name: \"Blood Test\", price: \"₹740\", guidelines: \"Avoid eating or drinking anything except water for at least 8 hours before the test.\" },\n//   // ... other test data\n// ];\n\n// const LabTests = () => {\n//   const [selectedTest, setSelectedTest] = useState(null);\n//   const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\n//   const [isPaymentProcessing, setIsPaymentProcessing] = useState(false); // Loading state\n//   const [successMessage, setSuccessMessage] = useState(\"\"); // New state for success message\n\n//   // Load Razorpay Script Dynamically\n//   useEffect(() => {\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//     script.async = true;\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script);\n//     };\n//   }, []);\n\n//   const handleSelectTest = (test) => {\n//     setSelectedTest(test);\n//     setIsPaymentSuccess(false); // Reset payment success status on test selection\n//     setSuccessMessage(\"\"); // Reset success message\n//   };\n\n//   const handlePaymentSuccess = () => {\n//     setIsPaymentSuccess(true);\n//     setIsPaymentProcessing(false); // Stop loading indicator\n//     setSuccessMessage(\"Payment successful! You can now view the test guidelines.\");\n\n//     // Twilio Notification API call\n//     fetch(\"http://localhost:5000/send-notification\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         phone: \"+918804339456\", // Replace with dynamic user's phone number\n//         message: \"Your payment was successful! You can now view the test guidelines.\",\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         if (data.success) {\n//           console.log(\"Notification sent successfully.\");\n//         } else {\n//           console.error(\"Failed to send notification:\", data.error);\n//         }\n//       })\n//       .catch((error) => console.error(\"Error sending notification:\", error));\n//   };\n\n//   const handlePaymentFailure = () => {\n//     setIsPaymentProcessing(false); // Stop loading indicator\n//     alert(\"Payment failed or was canceled. Please try again.\");\n//   };\n\n//   const initiatePayment = (test) => {\n//     if (window.Razorpay) {\n//       setIsPaymentProcessing(true); // Start loading indicator\n//       const options = {\n//         key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay key\n//         amount: parseFloat(test.price.replace(\"₹\", \"\")) * 100, // Convert to paise\n//         currency: \"INR\",\n//         name: \"Health App\",\n//         description: \"Lab Test Payment\",\n//         handler: (response) => {\n//           if (response.razorpay_payment_id) {\n//             handlePaymentSuccess();\n//           }\n//         },\n//         prefill: {\n//           name: \"Test User\", // Replace with dynamic user name\n//           email: \"testuser@example.com\", // Replace with dynamic user email\n//           contact: \"+911234567890\", // Replace with dynamic user contact\n//         },\n//         notes: {\n//           address: \"Health App Office\",\n//         },\n//         theme: {\n//           color: \"#3399cc\",\n//         },\n//         modal: {\n//           ondismiss: handlePaymentFailure, // Handle payment modal close\n//         },\n//       };\n\n//       const razorpayInstance = new window.Razorpay(options);\n//       razorpayInstance.open();\n//     } else {\n//       console.error(\"Razorpay SDK failed to load.\");\n//       handlePaymentFailure();\n//     }\n//   };\n\n//   return (\n//     <div className=\"p-6 bg-light-gray rounded-lg shadow-2xl\">\n//       <h2 className=\"text-3xl font-semibold text-soft-blue mb-4\">Available Lab Tests</h2>\n//       <ul className=\"space-y-4\">\n//         {labTests.map((test, index) => (\n//           <li\n//             key={index}\n//             className={`border-b pb-4 ${selectedTest === test ? \"bg-blue-50 border-blue-500\" : \"\"}`}\n//           >\n//             <div className=\"flex justify-between items-center\">\n//               <div>\n//                 <h3 className=\"text-xl font-bold text-gray-800\">{test.name}</h3>\n//                 <p className=\"text-gray-600\">Price: {test.price}</p>\n//               </div>\n//               <button\n//                 className=\"bg-soft-blue text-white px-4 py-2 rounded-lg shadow-2xl transition duration-300 ease-in-out hover:scale-105 animate-button-pulse\"\n//                 onClick={() => handleSelectTest(test)}\n//               >\n//                 View Guidelines\n//               </button>\n//             </div>\n//             {selectedTest === test && !isPaymentSuccess && (\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Please make a payment to view guidelines:</h4>\n//                 <button\n//                   className={`mt-2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-2xl ${isPaymentProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\n//                   onClick={() => initiatePayment(test)}\n//                   disabled={isPaymentProcessing}\n//                 >\n//                   {isPaymentProcessing ? \"Processing...\" : \"Pay Now\"}\n//                 </button>\n//               </div>\n//             )}\n//             {selectedTest === test && isPaymentSuccess && (\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Guidelines:</h4>\n//                 <p className=\"text-gray-600\">{test.guidelines}</p>\n//               </div>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//       {successMessage && (\n//         <div className=\"mt-6 p-4 bg-green-100 text-green-700 rounded-lg shadow-md\">\n//           <p>{successMessage}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default LabTests;","map":{"version":3,"names":[],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/LabTest.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// const labTests = [\r\n//   { name: \"Blood Test\", price: \"₹740\", guidelines: \"Avoid eating or drinking anything except water for at least 8 hours before the test.\" },\r\n//   // ... other test data\r\n// ];\r\n\r\n// const LabTests = () => {\r\n//   const [selectedTest, setSelectedTest] = useState(null);\r\n//   const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\r\n//   const [isPaymentProcessing, setIsPaymentProcessing] = useState(false); // Loading state\r\n//   const [successMessage, setSuccessMessage] = useState(\"\"); // New state for success message\r\n\r\n//   // Load Razorpay Script Dynamically\r\n//   useEffect(() => {\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//     script.async = true;\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script);\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSelectTest = (test) => {\r\n//     setSelectedTest(test);\r\n//     setIsPaymentSuccess(false); // Reset payment success status on test selection\r\n//     setSuccessMessage(\"\"); // Reset success message\r\n//   };\r\n\r\n//   const handlePaymentSuccess = () => {\r\n//     setIsPaymentSuccess(true);\r\n//     setIsPaymentProcessing(false); // Stop loading indicator\r\n//     setSuccessMessage(\"Payment successful! You can now view the test guidelines.\");\r\n\r\n//     // Twilio Notification API call\r\n//     fetch(\"http://localhost:5000/send-notification\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({\r\n//         phone: \"+918804339456\", // Replace with dynamic user's phone number\r\n//         message: \"Your payment was successful! You can now view the test guidelines.\",\r\n//       }),\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         if (data.success) {\r\n//           console.log(\"Notification sent successfully.\");\r\n//         } else {\r\n//           console.error(\"Failed to send notification:\", data.error);\r\n//         }\r\n//       })\r\n//       .catch((error) => console.error(\"Error sending notification:\", error));\r\n//   };\r\n\r\n//   const handlePaymentFailure = () => {\r\n//     setIsPaymentProcessing(false); // Stop loading indicator\r\n//     alert(\"Payment failed or was canceled. Please try again.\");\r\n//   };\r\n\r\n//   const initiatePayment = (test) => {\r\n//     if (window.Razorpay) {\r\n//       setIsPaymentProcessing(true); // Start loading indicator\r\n//       const options = {\r\n//         key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay key\r\n//         amount: parseFloat(test.price.replace(\"₹\", \"\")) * 100, // Convert to paise\r\n//         currency: \"INR\",\r\n//         name: \"Health App\",\r\n//         description: \"Lab Test Payment\",\r\n//         handler: (response) => {\r\n//           if (response.razorpay_payment_id) {\r\n//             handlePaymentSuccess();\r\n//           }\r\n//         },\r\n//         prefill: {\r\n//           name: \"Test User\", // Replace with dynamic user name\r\n//           email: \"testuser@example.com\", // Replace with dynamic user email\r\n//           contact: \"+911234567890\", // Replace with dynamic user contact\r\n//         },\r\n//         notes: {\r\n//           address: \"Health App Office\",\r\n//         },\r\n//         theme: {\r\n//           color: \"#3399cc\",\r\n//         },\r\n//         modal: {\r\n//           ondismiss: handlePaymentFailure, // Handle payment modal close\r\n//         },\r\n//       };\r\n\r\n//       const razorpayInstance = new window.Razorpay(options);\r\n//       razorpayInstance.open();\r\n//     } else {\r\n//       console.error(\"Razorpay SDK failed to load.\");\r\n//       handlePaymentFailure();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6 bg-light-gray rounded-lg shadow-2xl\">\r\n//       <h2 className=\"text-3xl font-semibold text-soft-blue mb-4\">Available Lab Tests</h2>\r\n//       <ul className=\"space-y-4\">\r\n//         {labTests.map((test, index) => (\r\n//           <li\r\n//             key={index}\r\n//             className={`border-b pb-4 ${selectedTest === test ? \"bg-blue-50 border-blue-500\" : \"\"}`}\r\n//           >\r\n//             <div className=\"flex justify-between items-center\">\r\n//               <div>\r\n//                 <h3 className=\"text-xl font-bold text-gray-800\">{test.name}</h3>\r\n//                 <p className=\"text-gray-600\">Price: {test.price}</p>\r\n//               </div>\r\n//               <button\r\n//                 className=\"bg-soft-blue text-white px-4 py-2 rounded-lg shadow-2xl transition duration-300 ease-in-out hover:scale-105 animate-button-pulse\"\r\n//                 onClick={() => handleSelectTest(test)}\r\n//               >\r\n//                 View Guidelines\r\n//               </button>\r\n//             </div>\r\n//             {selectedTest === test && !isPaymentSuccess && (\r\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\r\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Please make a payment to view guidelines:</h4>\r\n//                 <button\r\n//                   className={`mt-2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-2xl ${isPaymentProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\r\n//                   onClick={() => initiatePayment(test)}\r\n//                   disabled={isPaymentProcessing}\r\n//                 >\r\n//                   {isPaymentProcessing ? \"Processing...\" : \"Pay Now\"}\r\n//                 </button>\r\n//               </div>\r\n//             )}\r\n//             {selectedTest === test && isPaymentSuccess && (\r\n//               <div className=\"mt-2 p-4 border-t border-gray-300\">\r\n//                 <h4 className=\"text-lg font-semibold text-gray-700\">Guidelines:</h4>\r\n//                 <p className=\"text-gray-600\">{test.guidelines}</p>\r\n//               </div>\r\n//             )}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       {successMessage && (\r\n//         <div className=\"mt-6 p-4 bg-green-100 text-green-700 rounded-lg shadow-md\">\r\n//           <p>{successMessage}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LabTests;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}