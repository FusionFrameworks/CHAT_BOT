{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"👋 Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\n\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                     body: JSON.stringify({ symptoms: userInput }),\n//                 });\n\n//                 if (!response.ok) {\n//                     throw new Error(`Server error: ${response.statusText}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\n//             } catch (error) {\n//                 console.error(\"Error:\", error);\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Error: ${error.message || \"Unable to reach the backend.\"}`,\n//                 ]);\n//             }\n\n//             setUserInput(\"\");\n//         }\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\n//         const welcomeMessage = \"👋 Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     const handlePayment = async () => {\n//         const amount = parseFloat(paymentAmount); // Convert input to float\n\n//         // Validate amount\n//         if (isNaN(amount) || amount <= 0) {\n//             alert(\"Please enter a valid positive amount.\");\n//             return;\n//         }\n\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\n//                 ]);\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//             method: {\n//                 upi: true,       // Enable UPI\n//                 card: true,      // Enable card payments\n//                 netbanking: true, // Enable net banking\n//                 wallet: true     // Enable wallets like Paytm, etc.\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     const handlePaymentChange = (e) => {\n//         const value = e.target.value;\n\n//         // Validate input: Allow only positive numbers\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n//             setPaymentAmount(value); // Update state only if it's a valid number\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">🤖 Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\n//                             {response}\n//                         </p>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 {/* Payment Input */}\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         type=\"number\"\n//                         value={paymentAmount}\n//                         onChange={handlePaymentChange} // Updated to use new handler\n//                         placeholder=\"Enter amount to pay\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                         min=\"0\" // Prevent negative input in the input field\n//                     />\n//                     <button\n//                         onClick={handlePayment}\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Make Payment\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [paymentStatus, setPaymentStatus] = useState(false);\n  const [paymentAmount, setPaymentAmount] = useState('');\n\n  // Handle user input submission\n  const handleSend = async () => {\n    if (userInput.trim() === '') return;\n    const newMessage = {\n      text: userInput,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n\n    // Make API call to suggest doctors\n    try {\n      const response = await axios.post('http://localhost:5000/suggest_doctor', {\n        symptoms: userInput,\n        payment_status: paymentStatus\n      });\n      const botMessage = {\n        text: response.data.message,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setUserInput(''); // Clear input after sending\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        text: '⚠️ An error occurred while getting doctor suggestions.',\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  };\n\n  // Handle payment amount input change\n  const handlePaymentChange = e => {\n    setPaymentAmount(e.target.value);\n  };\n\n  // Handle payment confirmation\n  const handlePayment = () => {\n    if (parseFloat(paymentAmount) > 0) {\n      setPaymentStatus(true);\n      alert('Payment successful! You can now ask for doctor suggestions.');\n      setPaymentAmount('');\n    } else {\n      alert('Please enter a valid payment amount.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Describe your symptoms...\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment-area mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: paymentAmount,\n        onChange: handlePaymentChange,\n        placeholder: \"Enter payment amount\",\n        className: \"border border-gray-300 rounded-lg p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePayment,\n        className: \"bg-green-600 text-white rounded-lg p-2 mt-2 w-full\",\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"KXFvVb0uoGap19W9/TTRq9PuJRw=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","messages","setMessages","paymentStatus","setPaymentStatus","paymentAmount","setPaymentAmount","handleSend","trim","newMessage","text","sender","prevMessages","response","post","symptoms","payment_status","botMessage","data","message","error","console","errorMessage","handlePaymentChange","e","target","value","handlePayment","parseFloat","alert","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const [paymentAmount, setPaymentAmount] = useState(\"\"); // State for payment amount\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"👋 Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`]);\r\n\r\n//             try {\r\n//                 const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                     method: \"POST\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                     body: JSON.stringify({ symptoms: userInput }),\r\n//                 });\r\n\r\n//                 if (!response.ok) {\r\n//                     throw new Error(`Server error: ${response.statusText}`);\r\n//                 }\r\n\r\n//                 const data = await response.json();\r\n//                 setResponses((prevResponses) => [...prevResponses, data.message || \"No response from server.\"]);\r\n//             } catch (error) {\r\n//                 console.error(\"Error:\", error);\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Error: ${error.message || \"Unable to reach the backend.\"}`,\r\n//                 ]);\r\n//             }\r\n\r\n//             setUserInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         setPaymentAmount(\"\"); // Clear payment amount on chat clear\r\n//         const welcomeMessage = \"👋 Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const amount = parseFloat(paymentAmount); // Convert input to float\r\n\r\n//         // Validate amount\r\n//         if (isNaN(amount) || amount <= 0) {\r\n//             alert(\"Please enter a valid positive amount.\");\r\n//             return;\r\n//         }\r\n\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\", // Replace with your Razorpay API key\r\n//             amount: amount * 100, // Convert to smallest currency unit (e.g., paise for INR)\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\r\n//                 ]);\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//                 __prefill_vpa: \"success@razorpay\", // Razorpay's test UPI ID\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//             method: {\r\n//                 upi: true,       // Enable UPI\r\n//                 card: true,      // Enable card payments\r\n//                 netbanking: true, // Enable net banking\r\n//                 wallet: true     // Enable wallets like Paytm, etc.\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     const handlePaymentChange = (e) => {\r\n//         const value = e.target.value;\r\n\r\n//         // Validate input: Allow only positive numbers\r\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n//             setPaymentAmount(value); // Update state only if it's a valid number\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-md p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">🤖 Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <p key={index} className=\"mb-2 text-gray-800 transition-all duration-300 transform hover:text-blue-600\">\r\n//                             {response}\r\n//                         </p>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 {/* Payment Input */}\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         type=\"number\"\r\n//                         value={paymentAmount}\r\n//                         onChange={handlePaymentChange} // Updated to use new handler\r\n//                         placeholder=\"Enter amount to pay\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                         min=\"0\" // Prevent negative input in the input field\r\n//                     />\r\n//                     <button\r\n//                         onClick={handlePayment}\r\n//                         className=\"bg-green-600 text-white rounded-lg p-2 hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Make Payment\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Chatbot = () => {\r\n    const [userInput, setUserInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [paymentStatus, setPaymentStatus] = useState(false);\r\n    const [paymentAmount, setPaymentAmount] = useState('');\r\n\r\n    // Handle user input submission\r\n    const handleSend = async () => {\r\n        if (userInput.trim() === '') return;\r\n\r\n        const newMessage = { text: userInput, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n        \r\n        // Make API call to suggest doctors\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/suggest_doctor', {\r\n                symptoms: userInput,\r\n                payment_status: paymentStatus,\r\n            });\r\n\r\n            const botMessage = { text: response.data.message, sender: 'bot' };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setUserInput(''); // Clear input after sending\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n            const errorMessage = { text: '⚠️ An error occurred while getting doctor suggestions.', sender: 'bot' };\r\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        }\r\n    };\r\n\r\n    // Handle payment amount input change\r\n    const handlePaymentChange = (e) => {\r\n        setPaymentAmount(e.target.value);\r\n    };\r\n\r\n    // Handle payment confirmation\r\n    const handlePayment = () => {\r\n        if (parseFloat(paymentAmount) > 0) {\r\n            setPaymentStatus(true);\r\n            alert('Payment successful! You can now ask for doctor suggestions.');\r\n            setPaymentAmount('');\r\n        } else {\r\n            alert('Please enter a valid payment amount.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chat-window\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.sender}`}>\r\n                        {msg.text}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={userInput}\r\n                    onChange={(e) => setUserInput(e.target.value)}\r\n                    placeholder=\"Describe your symptoms...\"\r\n                    className=\"input-field\"\r\n                />\r\n                <button onClick={handleSend} className=\"send-button\">Send</button>\r\n            </div>\r\n            <div className=\"payment-area mt-4\">\r\n                <input\r\n                    type=\"number\"\r\n                    value={paymentAmount}\r\n                    onChange={handlePaymentChange}\r\n                    placeholder=\"Enter payment amount\"\r\n                    className=\"border border-gray-300 rounded-lg p-2 w-full\"\r\n                />\r\n                <button\r\n                    onClick={handlePayment}\r\n                    className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full\"\r\n                >\r\n                    Pay Now\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}