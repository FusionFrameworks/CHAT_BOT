{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const [paymentAmount, setPaymentAmount] = useState(\"\");\n//     const [storedSymptoms, setStoredSymptoms] = useState(\"\");\n//     const [consultationFee, setConsultationFee] = useState(null);\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\n\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const loadRazorpayScript = () => {\n//         return new Promise((resolve) => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.onload = () => {\n//                 resolve(true);\n//             };\n//             script.onerror = () => {\n//                 resolve(false);\n//             };\n//             document.body.appendChild(script);\n//         });\n//     };\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim() === \"\") {\n//             alert(\"Please enter your symptoms before sending.\");\n//             return;\n//         }\n\n//         setResponses((prevResponses) => [\n//             ...prevResponses, \n//             { text: `You said: ${userInput}`, sender: \"user\" }\n//         ]);\n//         setStoredSymptoms(userInput);\n\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({ symptoms: userInput }),\n//             });\n\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! status: ${response.status}`);\n//             }\n\n//             const data = await response.json();\n//             setResponses((prevResponses) => [\n//                 ...prevResponses, \n//                 { text: data.message || \"No response from server.\", sender: \"bot\" }\n//             ]);\n\n//             const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\n//             if (feeMatch) {\n//                 setConsultationFee(parseFloat(feeMatch[0]));\n//             }\n//         } catch (error) {\n//             setResponses((prevResponses) => [\n//                 ...prevResponses, \n//                 { text: `Error: ${error.message || \"Unable to reach the backend.\"}`, sender: \"bot\" }\n//             ]);\n//         }\n\n//         setUserInput(\"\");\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         setPaymentAmount(\"\");\n//         setStoredSymptoms(\"\");\n//         setConsultationFee(null);\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\n//     };\n\n//     const handlePayment = async () => {\n//         const amount = parseFloat(paymentAmount);\n\n//         if (isNaN(amount) || amount <= 0) {\n//             alert(\"Please enter a valid positive amount.\");\n//             return;\n//         }\n\n//         if (consultationFee === null || amount !== consultationFee) {\n//             alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\n//             return;\n//         }\n\n//         const res = await loadRazorpayScript();\n\n//         if (!res) {\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\n//             return;\n//         }\n\n//         const options = {\n//             key: \"rzp_test_lmkOFuIPmT2vi9\",\n//             amount: amount * 100,\n//             currency: \"INR\",\n//             name: \"Health Chatbot Service\",\n//             description: \"Chatbot Assistance Payment\",\n//             handler: async function (response) {\n//                 setResponses((prevResponses) => [\n//                     ...prevResponses,\n//                     { text: `Payment successful! Payment ID: ${response.razorpay_payment_id}`, sender: \"bot\" },\n//                 ]);\n\n//                 try {\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n//                         method: \"POST\",\n//                         headers: {\n//                             \"Content-Type\": \"application/json\",\n//                         },\n//                         body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true }),\n//                     });\n\n//                     if (!doctorResponse.ok) {\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\n//                     }\n\n//                     const doctorData = await doctorResponse.json();\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         { text: doctorData.message || \"No response from doctor suggestion.\", sender: \"bot\" },\n//                     ]);\n//                 } catch (error) {\n//                     setResponses((prevResponses) => [\n//                         ...prevResponses,\n//                         { text: `Error fetching doctor suggestions: ${error.message}`, sender: \"bot\" },\n//                     ]);\n//                 }\n//             },\n//             prefill: {\n//                 name: \"CareLink\",\n//                 email: \"carelink@gmail.com\",\n//                 contact: \"9999999999\",\n//                 __prefill_vpa: \"success@razorpay\",\n//             },\n//             theme: {\n//                 color: \"#3399cc\",\n//             },\n//             method: {\n//                 upi: true,\n//                 card: true,\n//                 netbanking: true,\n//                 wallet: true,\n//             },\n//         };\n\n//         const paymentObject = new window.Razorpay(options);\n//         paymentObject.open();\n//     };\n\n//     const handlePaymentChange = (e) => {\n//         const value = e.target.value;\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n//             setPaymentAmount(value);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n//             <div\n//                 className=\"absolute inset-0 bg-cover bg-center\"\n//                 style={{\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\n//                 }}\n//             >\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\n//             </div>\n//             <div className=\"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\n//                     {responses.map((response, index) => (\n//                         <div\n//                             key={index}\n//                             className={`flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\n//                         >\n//                             <div\n//                                 className={`p-3 rounded-2xl max-w-xs shadow-lg ${\n//                                     response.sender === \"user\"\n//                                         ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\"\n//                                         : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"\n//                                 }`}\n//                                 style={{ animationDelay: `${index * 0.1}s` }}\n//                             >\n//                                 {response.text}\n//                             </div>\n//                         </div>\n//                     ))}\n//                 </div>\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n//                     <input\n//                         id=\"user-input\"\n//                         type=\"text\"\n//                         value={userInput}\n//                         onChange={handleUserInput}\n//                         placeholder=\"Type your symptoms...\"\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handleSend}\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n//                 <button\n//                     onClick={handleClearChat}\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\"\n//                 >\n//                     Clear Chat\n//                 </button>\n//                 <div className=\"mt-4\">\n//                     <h3 className=\"text-lg font-semibold text-gray-800\">ðŸ’³ Make a Payment</h3>\n//                     <input\n//                         type=\"text\"\n//                         value={paymentAmount}\n//                         onChange={handlePaymentChange}\n//                         placeholder=\"Enter consultation fee\"\n//                         className=\"border border-gray-300 rounded-lg p-2 w-full mt-2 focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-300 shadow-md hover:shadow-lg\"\n//                     />\n//                     <button\n//                         onClick={handlePayment}\n//                         className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\n//                     >\n//                         Pay Now\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  patientIDFromLogin\n}) => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [storedSymptoms, setStoredSymptoms] = useState(\"\");\n  const [consultationFee, setConsultationFee] = useState(null);\n  const [patientID, setPatientID] = useState(patientIDFromLogin); // Set PatientID from login\n  const chatboxRef = useRef();\n  useEffect(() => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([{\n      text: welcomeMessage,\n      sender: \"bot\"\n    }]);\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n  }, []);\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => {\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  };\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (userInput.trim() === \"\") {\n      alert(\"Please enter your symptoms before sending.\");\n      return;\n    }\n    setResponses(prevResponses => [...prevResponses, {\n      text: `You said: ${userInput}`,\n      sender: \"user\"\n    }]);\n    setStoredSymptoms(userInput);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          symptoms: userInput,\n          patientID: patientID\n        }) // Send Patient ID with request\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResponses(prevResponses => [...prevResponses, {\n        text: data.message || \"No response from server.\",\n        sender: \"bot\"\n      }]);\n\n      // Extract and display consultation fee if found in the response\n      const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\n      if (feeMatch) {\n        setConsultationFee(parseFloat(feeMatch[0]));\n      }\n\n      // Display Patient ID after suggesting a doctor\n      setResponses(prevResponses => [...prevResponses, {\n        text: `Patient ID: ${patientID}`,\n        sender: \"bot\"\n      } // Display Patient ID after suggestion\n      ]);\n    } catch (error) {\n      setResponses(prevResponses => [...prevResponses, {\n        text: `Error: ${error.message || \"Unable to reach the backend.\"}`,\n        sender: \"bot\"\n      }]);\n    }\n    setUserInput(\"\");\n  };\n  const handleClearChat = () => {\n    setResponses([]);\n    setPaymentAmount(\"\");\n    setStoredSymptoms(\"\");\n    setConsultationFee(null);\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([{\n      text: welcomeMessage,\n      sender: \"bot\"\n    }]);\n  };\n  const handlePayment = async () => {\n    const amount = parseFloat(paymentAmount);\n    if (isNaN(amount) || amount <= 0) {\n      alert(\"Please enter a valid positive amount.\");\n      return;\n    }\n    if (consultationFee === null || amount !== consultationFee) {\n      alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\n      return;\n    }\n    const res = await loadRazorpayScript();\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Please try again.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_lmkOFuIPmT2vi9\",\n      amount: amount * 100,\n      currency: \"INR\",\n      name: \"Health Chatbot Service\",\n      description: \"Chatbot Assistance Payment\",\n      handler: async function (response) {\n        setResponses(prevResponses => [...prevResponses, {\n          text: `Payment successful! Payment ID: ${response.razorpay_payment_id}`,\n          sender: \"bot\"\n        }]);\n        try {\n          const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              symptoms: storedSymptoms,\n              payment_status: true,\n              patientID: patientID\n            }) // Send Patient ID\n          });\n          if (!doctorResponse.ok) {\n            throw new Error(`Server error: ${doctorResponse.statusText}`);\n          }\n          const doctorData = await doctorResponse.json();\n          setResponses(prevResponses => [...prevResponses, {\n            text: doctorData.message || \"No response from doctor suggestion.\",\n            sender: \"bot\"\n          }]);\n        } catch (error) {\n          setResponses(prevResponses => [...prevResponses, {\n            text: `Error fetching doctor suggestions: ${error.message}`,\n            sender: \"bot\"\n          }]);\n        }\n      },\n      prefill: {\n        name: \"CareLink\",\n        email: \"carelink@gmail.com\",\n        contact: \"9999999999\",\n        __prefill_vpa: \"success@razorpay\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      },\n      method: {\n        upi: true,\n        card: true,\n        netbanking: true,\n        wallet: true\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  };\n  const handlePaymentChange = e => {\n    const value = e.target.value;\n    if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\n      setPaymentAmount(value);\n    }\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-cover bg-center\",\n      style: {\n        backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center mb-4 text-gray-800\",\n        children: \"\\uD83E\\uDD16 Health Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\",\n        ref: chatboxRef,\n        children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `p-3 rounded-2xl max-w-xs shadow-lg ${response.sender === \"user\" ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\" : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"}`,\n            style: {\n              animationDelay: `${index * 0.1}s`\n            },\n            children: response.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col md:flex-row mt-4 space-y-4 md:space-y-0 md:space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user-input\",\n          className: \"flex-grow border rounded-lg px-3 py-2 focus:outline-none focus:border-blue-400 transition-all\",\n          type: \"text\",\n          placeholder: \"Enter your symptoms\",\n          value: userInput,\n          onChange: handleUserInput,\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSend();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-gradient-to-r from-blue-400 to-blue-600 text-white px-4 py-2 rounded-lg shadow-lg hover:from-blue-500 hover:to-blue-700 transition-transform duration-200 transform hover:scale-105\",\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-gradient-to-r from-red-400 to-red-600 text-white px-4 py-2 rounded-lg shadow-lg hover:from-red-500 hover:to-red-700 transition-transform duration-200 transform hover:scale-105\",\n          onClick: handleClearChat,\n          children: \"Clear Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block font-semibold text-gray-800\",\n            children: \"Consultation Fee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"border rounded-lg px-3 py-2 focus:outline-none focus:border-blue-400 transition-all\",\n            type: \"text\",\n            placeholder: `â‚¹ ${consultationFee || \"0.00\"}`,\n            value: paymentAmount,\n            onChange: handlePaymentChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-full bg-gradient-to-r from-green-400 to-green-600 text-white px-4 py-2 rounded-lg shadow-lg hover:from-green-500 hover:to-green-700 transition-transform duration-200 transform hover:scale-105\",\n          onClick: handlePayment,\n          children: \"Pay Fee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"WUWigLsloqFw9MQRcCNG5TEUBow=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","patientIDFromLogin","_s","userInput","setUserInput","responses","setResponses","paymentAmount","setPaymentAmount","storedSymptoms","setStoredSymptoms","consultationFee","setConsultationFee","patientID","setPatientID","chatboxRef","welcomeMessage","text","sender","inputField","document","getElementById","focus","loadRazorpayScript","Promise","resolve","script","createElement","src","onload","onerror","body","appendChild","handleUserInput","e","target","value","handleSend","trim","alert","prevResponses","response","fetch","method","headers","JSON","stringify","symptoms","ok","Error","status","data","json","message","feeMatch","match","parseFloat","error","handleClearChat","handlePayment","amount","isNaN","res","options","key","currency","name","description","handler","razorpay_payment_id","doctorResponse","payment_status","statusText","doctorData","prefill","email","contact","__prefill_vpa","theme","color","upi","card","netbanking","wallet","paymentObject","window","Razorpay","open","handlePaymentChange","test","current","scrollTop","scrollHeight","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","animationDelay","id","type","placeholder","onChange","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const [paymentAmount, setPaymentAmount] = useState(\"\");\r\n//     const [storedSymptoms, setStoredSymptoms] = useState(\"\");\r\n//     const [consultationFee, setConsultationFee] = useState(null);\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\r\n        \r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const loadRazorpayScript = () => {\r\n//         return new Promise((resolve) => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.onload = () => {\r\n//                 resolve(true);\r\n//             };\r\n//             script.onerror = () => {\r\n//                 resolve(false);\r\n//             };\r\n//             document.body.appendChild(script);\r\n//         });\r\n//     };\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim() === \"\") {\r\n//             alert(\"Please enter your symptoms before sending.\");\r\n//             return;\r\n//         }\r\n\r\n//         setResponses((prevResponses) => [\r\n//             ...prevResponses, \r\n//             { text: `You said: ${userInput}`, sender: \"user\" }\r\n//         ]);\r\n//         setStoredSymptoms(userInput);\r\n\r\n//         try {\r\n//             const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify({ symptoms: userInput }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 throw new Error(`HTTP error! status: ${response.status}`);\r\n//             }\r\n\r\n//             const data = await response.json();\r\n//             setResponses((prevResponses) => [\r\n//                 ...prevResponses, \r\n//                 { text: data.message || \"No response from server.\", sender: \"bot\" }\r\n//             ]);\r\n\r\n//             const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\r\n//             if (feeMatch) {\r\n//                 setConsultationFee(parseFloat(feeMatch[0]));\r\n//             }\r\n//         } catch (error) {\r\n//             setResponses((prevResponses) => [\r\n//                 ...prevResponses, \r\n//                 { text: `Error: ${error.message || \"Unable to reach the backend.\"}`, sender: \"bot\" }\r\n//             ]);\r\n//         }\r\n\r\n//         setUserInput(\"\");\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         setPaymentAmount(\"\");\r\n//         setStoredSymptoms(\"\");\r\n//         setConsultationFee(null);\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\r\n//     };\r\n\r\n//     const handlePayment = async () => {\r\n//         const amount = parseFloat(paymentAmount);\r\n\r\n//         if (isNaN(amount) || amount <= 0) {\r\n//             alert(\"Please enter a valid positive amount.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (consultationFee === null || amount !== consultationFee) {\r\n//             alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\r\n//             return;\r\n//         }\r\n\r\n//         const res = await loadRazorpayScript();\r\n\r\n//         if (!res) {\r\n//             alert(\"Razorpay SDK failed to load. Please try again.\");\r\n//             return;\r\n//         }\r\n\r\n//         const options = {\r\n//             key: \"rzp_test_lmkOFuIPmT2vi9\",\r\n//             amount: amount * 100,\r\n//             currency: \"INR\",\r\n//             name: \"Health Chatbot Service\",\r\n//             description: \"Chatbot Assistance Payment\",\r\n//             handler: async function (response) {\r\n//                 setResponses((prevResponses) => [\r\n//                     ...prevResponses,\r\n//                     { text: `Payment successful! Payment ID: ${response.razorpay_payment_id}`, sender: \"bot\" },\r\n//                 ]);\r\n\r\n//                 try {\r\n//                     const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n//                         method: \"POST\",\r\n//                         headers: {\r\n//                             \"Content-Type\": \"application/json\",\r\n//                         },\r\n//                         body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true }),\r\n//                     });\r\n\r\n//                     if (!doctorResponse.ok) {\r\n//                         throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n//                     }\r\n\r\n//                     const doctorData = await doctorResponse.json();\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         { text: doctorData.message || \"No response from doctor suggestion.\", sender: \"bot\" },\r\n//                     ]);\r\n//                 } catch (error) {\r\n//                     setResponses((prevResponses) => [\r\n//                         ...prevResponses,\r\n//                         { text: `Error fetching doctor suggestions: ${error.message}`, sender: \"bot\" },\r\n//                     ]);\r\n//                 }\r\n//             },\r\n//             prefill: {\r\n//                 name: \"CareLink\",\r\n//                 email: \"carelink@gmail.com\",\r\n//                 contact: \"9999999999\",\r\n//                 __prefill_vpa: \"success@razorpay\",\r\n//             },\r\n//             theme: {\r\n//                 color: \"#3399cc\",\r\n//             },\r\n//             method: {\r\n//                 upi: true,\r\n//                 card: true,\r\n//                 netbanking: true,\r\n//                 wallet: true,\r\n//             },\r\n//         };\r\n\r\n//         const paymentObject = new window.Razorpay(options);\r\n//         paymentObject.open();\r\n//     };\r\n\r\n//     const handlePaymentChange = (e) => {\r\n//         const value = e.target.value;\r\n//         if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n//             setPaymentAmount(value);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n//             <div\r\n//                 className=\"absolute inset-0 bg-cover bg-center\"\r\n//                 style={{\r\n//                     backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n//                 }}\r\n//             >\r\n//                 <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n//             </div>\r\n//             <div className=\"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n//                 <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n//                 <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n//                     {responses.map((response, index) => (\r\n//                         <div\r\n//                             key={index}\r\n//                             className={`flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\r\n//                         >\r\n//                             <div\r\n//                                 className={`p-3 rounded-2xl max-w-xs shadow-lg ${\r\n//                                     response.sender === \"user\"\r\n//                                         ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\"\r\n//                                         : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"\r\n//                                 }`}\r\n//                                 style={{ animationDelay: `${index * 0.1}s` }}\r\n//                             >\r\n//                                 {response.text}\r\n//                             </div>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"flex flex-col md:flex-row mt-4 space-y-2 md:space-y-0 md:space-x-2\">\r\n//                     <input\r\n//                         id=\"user-input\"\r\n//                         type=\"text\"\r\n//                         value={userInput}\r\n//                         onChange={handleUserInput}\r\n//                         placeholder=\"Type your symptoms...\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 flex-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handleSend}\r\n//                         className=\"bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Send\r\n//                     </button>\r\n//                 </div>\r\n//                 <button\r\n//                     onClick={handleClearChat}\r\n//                     className=\"bg-red-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-red-700 transition duration-300 shadow-md\"\r\n//                 >\r\n//                     Clear Chat\r\n//                 </button>\r\n//                 <div className=\"mt-4\">\r\n//                     <h3 className=\"text-lg font-semibold text-gray-800\">ðŸ’³ Make a Payment</h3>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         value={paymentAmount}\r\n//                         onChange={handlePaymentChange}\r\n//                         placeholder=\"Enter consultation fee\"\r\n//                         className=\"border border-gray-300 rounded-lg p-2 w-full mt-2 focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-300 shadow-md hover:shadow-lg\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={handlePayment}\r\n//                         className=\"bg-green-600 text-white rounded-lg p-2 mt-2 w-full hover:bg-green-700 transition duration-300 shadow-md transform hover:scale-105\"\r\n//                     >\r\n//                         Pay Now\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Chatbot = ({ patientIDFromLogin }) => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const [paymentAmount, setPaymentAmount] = useState(\"\");\r\n    const [storedSymptoms, setStoredSymptoms] = useState(\"\");\r\n    const [consultationFee, setConsultationFee] = useState(null);\r\n    const [patientID, setPatientID] = useState(patientIDFromLogin); // Set PatientID from login\r\n    const chatboxRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\r\n\r\n        const inputField = document.getElementById(\"user-input\");\r\n        if (inputField) {\r\n            inputField.focus();\r\n        }\r\n    }, []);\r\n\r\n    const loadRazorpayScript = () => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n            script.onload = () => {\r\n                resolve(true);\r\n            };\r\n            script.onerror = () => {\r\n                resolve(false);\r\n            };\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    const handleUserInput = (e) => {\r\n        setUserInput(e.target.value);\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (userInput.trim() === \"\") {\r\n            alert(\"Please enter your symptoms before sending.\");\r\n            return;\r\n        }\r\n\r\n        setResponses((prevResponses) => [\r\n            ...prevResponses,\r\n            { text: `You said: ${userInput}`, sender: \"user\" }\r\n        ]);\r\n        setStoredSymptoms(userInput);\r\n\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ symptoms: userInput, patientID: patientID }), // Send Patient ID with request\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setResponses((prevResponses) => [\r\n                ...prevResponses,\r\n                { text: data.message || \"No response from server.\", sender: \"bot\" }\r\n            ]);\r\n\r\n            // Extract and display consultation fee if found in the response\r\n            const feeMatch = data.message.match(/(?:\\d+\\.?\\d*)/);\r\n            if (feeMatch) {\r\n                setConsultationFee(parseFloat(feeMatch[0]));\r\n            }\r\n\r\n            // Display Patient ID after suggesting a doctor\r\n            setResponses((prevResponses) => [\r\n                ...prevResponses,\r\n                { text: `Patient ID: ${patientID}`, sender: \"bot\" } // Display Patient ID after suggestion\r\n            ]);\r\n\r\n        } catch (error) {\r\n            setResponses((prevResponses) => [\r\n                ...prevResponses,\r\n                { text: `Error: ${error.message || \"Unable to reach the backend.\"}`, sender: \"bot\" }\r\n            ]);\r\n        }\r\n\r\n        setUserInput(\"\");\r\n    };\r\n\r\n    const handleClearChat = () => {\r\n        setResponses([]);\r\n        setPaymentAmount(\"\");\r\n        setStoredSymptoms(\"\");\r\n        setConsultationFee(null);\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([{ text: welcomeMessage, sender: \"bot\" }]);\r\n    };\r\n\r\n    const handlePayment = async () => {\r\n        const amount = parseFloat(paymentAmount);\r\n\r\n        if (isNaN(amount) || amount <= 0) {\r\n            alert(\"Please enter a valid positive amount.\");\r\n            return;\r\n        }\r\n\r\n        if (consultationFee === null || amount !== consultationFee) {\r\n            alert(`Please enter the correct consultation fee of â‚¹ ${consultationFee}.`);\r\n            return;\r\n        }\r\n\r\n        const res = await loadRazorpayScript();\r\n\r\n        if (!res) {\r\n            alert(\"Razorpay SDK failed to load. Please try again.\");\r\n            return;\r\n        }\r\n\r\n        const options = {\r\n            key: \"rzp_test_lmkOFuIPmT2vi9\",\r\n            amount: amount * 100,\r\n            currency: \"INR\",\r\n            name: \"Health Chatbot Service\",\r\n            description: \"Chatbot Assistance Payment\",\r\n            handler: async function (response) {\r\n                setResponses((prevResponses) => [\r\n                    ...prevResponses,\r\n                    { text: `Payment successful! Payment ID: ${response.razorpay_payment_id}`, sender: \"bot\" },\r\n                ]);\r\n\r\n                try {\r\n                    const doctorResponse = await fetch(\"http://127.0.0.1:5000/suggest_doctor\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({ symptoms: storedSymptoms, payment_status: true, patientID: patientID }), // Send Patient ID\r\n                    });\r\n\r\n                    if (!doctorResponse.ok) {\r\n                        throw new Error(`Server error: ${doctorResponse.statusText}`);\r\n                    }\r\n\r\n                    const doctorData = await doctorResponse.json();\r\n                    setResponses((prevResponses) => [\r\n                        ...prevResponses,\r\n                        { text: doctorData.message || \"No response from doctor suggestion.\", sender: \"bot\" },\r\n                    ]);\r\n                } catch (error) {\r\n                    setResponses((prevResponses) => [\r\n                        ...prevResponses,\r\n                        { text: `Error fetching doctor suggestions: ${error.message}`, sender: \"bot\" },\r\n                    ]);\r\n                }\r\n            },\r\n            prefill: {\r\n                name: \"CareLink\",\r\n                email: \"carelink@gmail.com\",\r\n                contact: \"9999999999\",\r\n                __prefill_vpa: \"success@razorpay\",\r\n            },\r\n            theme: {\r\n                color: \"#3399cc\",\r\n            },\r\n            method: {\r\n                upi: true,\r\n                card: true,\r\n                netbanking: true,\r\n                wallet: true,\r\n            },\r\n        };\r\n\r\n        const paymentObject = new window.Razorpay(options);\r\n        paymentObject.open();\r\n    };\r\n\r\n    const handlePaymentChange = (e) => {\r\n        const value = e.target.value;\r\n        if (value === \"\" || /^[0-9]*\\.?[0-9]*$/.test(value)) {\r\n            setPaymentAmount(value);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (chatboxRef.current) {\r\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n        }\r\n    }, [responses]);\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\r\n            <div\r\n                className=\"absolute inset-0 bg-cover bg-center\"\r\n                style={{\r\n                    backgroundImage: \"url('https://img.freepik.com/free-vector/people-waiting-hospital-reception-while-wearing-medical-masks_23-2148806775.jpg?w=1060&t=st=1728811919~exp=1728812519~hmac=b79e4edd66a7da5c7153bc6b7fc572954a425ce0020f7d178139ec54d61c4877')\",\r\n                }}\r\n            >\r\n                <div className=\"absolute inset-0 bg-black opacity-50 backdrop-blur-lg\"></div>\r\n            </div>\r\n            <div className=\"chatbot-container w-full max-w-lg p-6 bg-white rounded-lg shadow-2xl border border-gray-200 mt-10 z-10 relative transform transition-transform duration-300 hover:scale-105\">\r\n                <h2 className=\"text-2xl font-semibold text-center mb-4 text-gray-800\">ðŸ¤– Health Chatbot</h2>\r\n                <div className=\"chatbox border border-gray-300 p-4 h-72 overflow-y-auto rounded-lg bg-gray-100 shadow-inner\" ref={chatboxRef}>\r\n                    {responses.map((response, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`flex ${response.sender === \"user\" ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\r\n                        >\r\n                            <div\r\n                                className={`p-3 rounded-2xl max-w-xs shadow-lg ${\r\n                                    response.sender === \"user\"\r\n                                        ? \"bg-gradient-to-r from-blue-400 to-blue-600 text-white rounded-br-none\"\r\n                                        : \"bg-gradient-to-r from-gray-300 to-gray-400 text-gray-900 rounded-bl-none\"\r\n                                }`}\r\n                                style={{ animationDelay: `${index * 0.1}s` }}\r\n                            >\r\n                                {response.text}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"flex flex-col md:flex-row mt-4 space-y-4 md:space-y-0 md:space-x-4\">\r\n                    <input\r\n                        id=\"user-input\"\r\n                        className=\"flex-grow border rounded-lg px-3 py-2 focus:outline-none focus:border-blue-400 transition-all\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your symptoms\"\r\n                        value={userInput}\r\n                        onChange={handleUserInput}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                                handleSend();\r\n                            }\r\n                        }}\r\n                    />\r\n                    <button\r\n                        className=\"bg-gradient-to-r from-blue-400 to-blue-600 text-white px-4 py-2 rounded-lg shadow-lg hover:from-blue-500 hover:to-blue-700 transition-transform duration-200 transform hover:scale-105\"\r\n                        onClick={handleSend}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                    <button\r\n                        className=\"bg-gradient-to-r from-red-400 to-red-600 text-white px-4 py-2 rounded-lg shadow-lg hover:from-red-500 hover:to-red-700 transition-transform duration-200 transform hover:scale-105\"\r\n                        onClick={handleClearChat}\r\n                    >\r\n                        Clear Chat\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"mt-4 space-y-4\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                        <label className=\"block font-semibold text-gray-800\">Consultation Fee:</label>\r\n                        <input\r\n                            className=\"border rounded-lg px-3 py-2 focus:outline-none focus:border-blue-400 transition-all\"\r\n                            type=\"text\"\r\n                            placeholder={`â‚¹ ${consultationFee || \"0.00\"}`}\r\n                            value={paymentAmount}\r\n                            onChange={handlePaymentChange}\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        className=\"w-full bg-gradient-to-r from-green-400 to-green-600 text-white px-4 py-2 rounded-lg shadow-lg hover:from-green-500 hover:to-green-700 transition-transform duration-200 transform hover:scale-105\"\r\n                        onClick={handlePayment}\r\n                    >\r\n                        Pay Fee\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}