{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT_BOT\\\\chatbot_Frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// // Chatbot.js\n// import React, { useState } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = () => {\n//         if (userInput.trim()) {\n//             // Simulating sending the user's input to the backend and getting a response\n//             const newResponse = `You said: ${userInput}`; // Replace with your API call\n//             setResponses((prevResponses) => [...prevResponses, newResponse]);\n//             setUserInput(\"\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"chatbot-container p-6 bg-white rounded-lg shadow-md\">\n//             <h2 className=\"text-2xl font-semibold mb-4\">ðŸ¤– Chatbot</h2>\n//             <div className=\"chatbox border border-gray-300 p-4 h-64 overflow-y-auto\">\n//                 {responses.map((response, index) => (\n//                     <p key={index}>{response}</p>\n//                 ))}\n//             </div>\n//             <div className=\"flex mt-4\">\n//                 <input\n//                     type=\"text\"\n//                     value={userInput}\n//                     onChange={handleUserInput}\n//                     placeholder=\"Type your message...\"\n//                     className=\"border border-gray-300 rounded-l-lg p-2 flex-1\"\n//                 />\n//                 <button\n//                     onClick={handleSend}\n//                     className=\"bg-blue-600 text-white rounded-r-lg p-2\"\n//                 >\n//                     Send\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// const Chatbot = () => {\n//     const [userInput, setUserInput] = useState(\"\");\n//     const [responses, setResponses] = useState([]);\n//     const chatboxRef = useRef();\n\n//     useEffect(() => {\n//         // Welcoming message\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n\n//         // Auto-focus on the input field when the component mounts\n//         const inputField = document.getElementById(\"user-input\");\n//         if (inputField) {\n//             inputField.focus();\n//         }\n//     }, []);\n\n//     const handleUserInput = (e) => {\n//         setUserInput(e.target.value);\n//     };\n\n//     const handleSend = async () => {\n//         if (userInput.trim()) {\n//             // Simulate sending the user's input to the backend and getting a response\n//             const newResponse = await simulateApiCall(userInput); // Replace with your API call\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`, newResponse]);\n//             setUserInput(\"\");\n//         }\n//     };\n\n//     const simulateApiCall = async (input) => {\n//         // Simulate an API call delay\n//         return new Promise((resolve) => {\n//             setTimeout(() => {\n//                 // Simulated response based on user input\n//                 const responses = {\n//                     \"hello\": \"Hello! How can I help you?\",\n//                     \"symptoms\": \"Please tell me your symptoms one by one.\",\n//                     \"bye\": \"Goodbye! Take care!\",\n//                 };\n//                 resolve(responses[input.toLowerCase()] || \"I'm not sure how to respond to that.\");\n//             }, 1000);\n//         });\n//     };\n\n//     const handleClearChat = () => {\n//         setResponses([]);\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n//         setResponses([welcomeMessage]);\n//     };\n\n//     useEffect(() => {\n//         if (chatboxRef.current) {\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n//         }\n//     }, [responses]);\n\n//     return (\n//         <div className=\"chatbot-container p-6 bg-white rounded-lg shadow-md\">\n//             <h2 className=\"text-2xl font-semibold mb-4\">ðŸ¤– Chatbot</h2>\n//             <div className=\"chatbox border border-gray-300 p-4 h-64 overflow-y-auto\" ref={chatboxRef}>\n//                 {responses.map((response, index) => (\n//                     <p key={index}>{response}</p>\n//                 ))}\n//             </div>\n//             <div className=\"flex mt-4\">\n//                 <input\n//                     id=\"user-input\"\n//                     type=\"text\"\n//                     value={userInput}\n//                     onChange={handleUserInput}\n//                     placeholder=\"Type your message...\"\n//                     className=\"border border-gray-300 rounded-l-lg p-2 flex-1\"\n//                 />\n//                 <button\n//                     onClick={handleSend}\n//                     className=\"bg-blue-600 text-white rounded-r-lg p-2\"\n//                 >\n//                     Send\n//                 </button>\n//             </div>\n//             <button onClick={handleClearChat} className=\"bg-red-600 text-white rounded p-2 mt-2\">\n//                 Clear Chat\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [responses, setResponses] = useState([]);\n  const chatboxRef = useRef();\n  useEffect(() => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n    const inputField = document.getElementById(\"user-input\");\n    if (inputField) {\n      inputField.focus();\n    }\n  }, []);\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (userInput.trim()) {\n      try {\n        // Make API call to your Flask backend\n        const response = await axios.post(\"http://localhost:5000/chatb\", {\n          symptoms: userInput\n        });\n        const newResponse = response.data.message || response.data.suggestions;\n        setResponses(prevResponses => [...prevResponses, `You said: ${userInput}`, newResponse ? `Suggestion: ${JSON.stringify(newResponse)}` : \"I'm not sure how to respond to that.\"]);\n      } catch (error) {\n        console.error(\"Error fetching data from API:\", error);\n        setResponses(prevResponses => [...prevResponses, \"Error: Unable to reach the backend.\"]);\n      }\n      setUserInput(\"\");\n    }\n  };\n  const handleClearChat = () => {\n    const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\n    setResponses([welcomeMessage]);\n  };\n  useEffect(() => {\n    if (chatboxRef.current) {\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n    }\n  }, [responses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container p-6 bg-white rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-4\",\n      children: \"\\uD83E\\uDD16 Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox border border-gray-300 p-4 h-64 overflow-y-auto\",\n      ref: chatboxRef,\n      children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-input\",\n        type: \"text\",\n        value: userInput,\n        onChange: handleUserInput,\n        placeholder: \"Type your message...\",\n        className: \"border border-gray-300 rounded-l-lg p-2 flex-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"bg-blue-600 text-white rounded-r-lg p-2\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClearChat,\n      className: \"bg-red-600 text-white rounded p-2 mt-2\",\n      children: \"Clear Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"S4H8oJ7hkz6Vf9ydGhpGU6l8+IQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","responses","setResponses","chatboxRef","welcomeMessage","inputField","document","getElementById","focus","handleUserInput","e","target","value","handleSend","trim","response","post","symptoms","newResponse","data","message","suggestions","prevResponses","JSON","stringify","error","console","handleClearChat","current","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","id","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/CHAT_BOT/chatbot_Frontend/src/Chatbot.js"],"sourcesContent":["// // Chatbot.js\r\n// import React, { useState } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = () => {\r\n//         if (userInput.trim()) {\r\n//             // Simulating sending the user's input to the backend and getting a response\r\n//             const newResponse = `You said: ${userInput}`; // Replace with your API call\r\n//             setResponses((prevResponses) => [...prevResponses, newResponse]);\r\n//             setUserInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"chatbot-container p-6 bg-white rounded-lg shadow-md\">\r\n//             <h2 className=\"text-2xl font-semibold mb-4\">ðŸ¤– Chatbot</h2>\r\n//             <div className=\"chatbox border border-gray-300 p-4 h-64 overflow-y-auto\">\r\n//                 {responses.map((response, index) => (\r\n//                     <p key={index}>{response}</p>\r\n//                 ))}\r\n//             </div>\r\n//             <div className=\"flex mt-4\">\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     value={userInput}\r\n//                     onChange={handleUserInput}\r\n//                     placeholder=\"Type your message...\"\r\n//                     className=\"border border-gray-300 rounded-l-lg p-2 flex-1\"\r\n//                 />\r\n//                 <button\r\n//                     onClick={handleSend}\r\n//                     className=\"bg-blue-600 text-white rounded-r-lg p-2\"\r\n//                 >\r\n//                     Send\r\n//                 </button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// const Chatbot = () => {\r\n//     const [userInput, setUserInput] = useState(\"\");\r\n//     const [responses, setResponses] = useState([]);\r\n//     const chatboxRef = useRef();\r\n\r\n//     useEffect(() => {\r\n//         // Welcoming message\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n        \r\n//         // Auto-focus on the input field when the component mounts\r\n//         const inputField = document.getElementById(\"user-input\");\r\n//         if (inputField) {\r\n//             inputField.focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     const handleUserInput = (e) => {\r\n//         setUserInput(e.target.value);\r\n//     };\r\n\r\n//     const handleSend = async () => {\r\n//         if (userInput.trim()) {\r\n//             // Simulate sending the user's input to the backend and getting a response\r\n//             const newResponse = await simulateApiCall(userInput); // Replace with your API call\r\n//             setResponses((prevResponses) => [...prevResponses, `You said: ${userInput}`, newResponse]);\r\n//             setUserInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const simulateApiCall = async (input) => {\r\n//         // Simulate an API call delay\r\n//         return new Promise((resolve) => {\r\n//             setTimeout(() => {\r\n//                 // Simulated response based on user input\r\n//                 const responses = {\r\n//                     \"hello\": \"Hello! How can I help you?\",\r\n//                     \"symptoms\": \"Please tell me your symptoms one by one.\",\r\n//                     \"bye\": \"Goodbye! Take care!\",\r\n//                 };\r\n//                 resolve(responses[input.toLowerCase()] || \"I'm not sure how to respond to that.\");\r\n//             }, 1000);\r\n//         });\r\n//     };\r\n\r\n//     const handleClearChat = () => {\r\n//         setResponses([]);\r\n//         const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n//         setResponses([welcomeMessage]);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (chatboxRef.current) {\r\n//             chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n//         }\r\n//     }, [responses]);\r\n\r\n//     return (\r\n//         <div className=\"chatbot-container p-6 bg-white rounded-lg shadow-md\">\r\n//             <h2 className=\"text-2xl font-semibold mb-4\">ðŸ¤– Chatbot</h2>\r\n//             <div className=\"chatbox border border-gray-300 p-4 h-64 overflow-y-auto\" ref={chatboxRef}>\r\n//                 {responses.map((response, index) => (\r\n//                     <p key={index}>{response}</p>\r\n//                 ))}\r\n//             </div>\r\n//             <div className=\"flex mt-4\">\r\n//                 <input\r\n//                     id=\"user-input\"\r\n//                     type=\"text\"\r\n//                     value={userInput}\r\n//                     onChange={handleUserInput}\r\n//                     placeholder=\"Type your message...\"\r\n//                     className=\"border border-gray-300 rounded-l-lg p-2 flex-1\"\r\n//                 />\r\n//                 <button\r\n//                     onClick={handleSend}\r\n//                     className=\"bg-blue-600 text-white rounded-r-lg p-2\"\r\n//                 >\r\n//                     Send\r\n//                 </button>\r\n//             </div>\r\n//             <button onClick={handleClearChat} className=\"bg-red-600 text-white rounded p-2 mt-2\">\r\n//                 Clear Chat\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Chatbot = () => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const chatboxRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n\r\n        const inputField = document.getElementById(\"user-input\");\r\n        if (inputField) {\r\n            inputField.focus();\r\n        }\r\n    }, []);\r\n\r\n    const handleUserInput = (e) => {\r\n        setUserInput(e.target.value);\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (userInput.trim()) {\r\n            try {\r\n                // Make API call to your Flask backend\r\n                const response = await axios.post(\"http://localhost:5000/chatb\", {\r\n                    symptoms: userInput,\r\n                });\r\n\r\n                const newResponse = response.data.message || response.data.suggestions;\r\n                setResponses((prevResponses) => [\r\n                    ...prevResponses,\r\n                    `You said: ${userInput}`,\r\n                    newResponse\r\n                        ? `Suggestion: ${JSON.stringify(newResponse)}`\r\n                        : \"I'm not sure how to respond to that.\",\r\n                ]);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data from API:\", error);\r\n                setResponses((prevResponses) => [\r\n                    ...prevResponses,\r\n                    \"Error: Unable to reach the backend.\",\r\n                ]);\r\n            }\r\n            setUserInput(\"\");\r\n        }\r\n    };\r\n\r\n    const handleClearChat = () => {\r\n        const welcomeMessage = \"ðŸ‘‹ Welcome to the Health Chatbot! How can I assist you today?\";\r\n        setResponses([welcomeMessage]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (chatboxRef.current) {\r\n            chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n        }\r\n    }, [responses]);\r\n\r\n    return (\r\n        <div className=\"chatbot-container p-6 bg-white rounded-lg shadow-md\">\r\n            <h2 className=\"text-2xl font-semibold mb-4\">ðŸ¤– Chatbot</h2>\r\n            <div className=\"chatbox border border-gray-300 p-4 h-64 overflow-y-auto\" ref={chatboxRef}>\r\n                {responses.map((response, index) => (\r\n                    <p key={index}>{response}</p>\r\n                ))}\r\n            </div>\r\n            <div className=\"flex mt-4\">\r\n                <input\r\n                    id=\"user-input\"\r\n                    type=\"text\"\r\n                    value={userInput}\r\n                    onChange={handleUserInput}\r\n                    placeholder=\"Type your message...\"\r\n                    className=\"border border-gray-300 rounded-l-lg p-2 flex-1\"\r\n                />\r\n                <button onClick={handleSend} className=\"bg-blue-600 text-white rounded-r-lg p-2\">\r\n                    Send\r\n                </button>\r\n            </div>\r\n            <button onClick={handleClearChat} className=\"bg-red-600 text-white rounded p-2 mt-2\">\r\n                Clear Chat\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMY,UAAU,GAAGV,MAAM,CAAC,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ,MAAMY,cAAc,GAAG,+DAA+D;IACtFF,YAAY,CAAC,CAACE,cAAc,CAAC,CAAC;IAE9B,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IACxD,IAAIF,UAAU,EAAE;MACZA,UAAU,CAACG,KAAK,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}