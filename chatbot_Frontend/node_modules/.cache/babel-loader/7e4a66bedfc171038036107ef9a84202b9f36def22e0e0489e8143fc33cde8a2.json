{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Messaging\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestManagedCertListInstance = exports.RequestManagedCertInstance = exports.RequestManagedCertContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass RequestManagedCertContextImpl {\n  constructor(_version, domainSid) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(domainSid)) {\n      throw new Error(\"Parameter 'domainSid' is not valid.\");\n    }\n    this._solution = {\n      domainSid\n    };\n    this._uri = `/LinkShortening/Domains/${domainSid}/RequestManagedCert`;\n  }\n  update(callback) {\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\"\n      });\n    operationPromise = operationPromise.then(payload => new RequestManagedCertInstance(operationVersion, payload, instance._solution.domainSid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.RequestManagedCertContextImpl = RequestManagedCertContextImpl;\nclass RequestManagedCertInstance {\n  constructor(_version, payload, domainSid) {\n    this._version = _version;\n    this.domainSid = payload.domain_sid;\n    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n    this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);\n    this.domainName = payload.domain_name;\n    this.certificateSid = payload.certificate_sid;\n    this.url = payload.url;\n    this.managed = payload.managed;\n    this.requesting = payload.requesting;\n    this._solution = {\n      domainSid: domainSid || this.domainSid\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new RequestManagedCertContextImpl(this._version, this._solution.domainSid);\n    return this._context;\n  }\n  /**\n   * Update a RequestManagedCertInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed RequestManagedCertInstance\n   */\n  update(callback) {\n    return this._proxy.update(callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      domainSid: this.domainSid,\n      dateUpdated: this.dateUpdated,\n      dateCreated: this.dateCreated,\n      dateExpires: this.dateExpires,\n      domainName: this.domainName,\n      certificateSid: this.certificateSid,\n      url: this.url,\n      managed: this.managed,\n      requesting: this.requesting\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.RequestManagedCertInstance = RequestManagedCertInstance;\nfunction RequestManagedCertListInstance(version) {\n  const instance = domainSid => instance.get(domainSid);\n  instance.get = function get(domainSid) {\n    return new RequestManagedCertContextImpl(version, domainSid);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.RequestManagedCertListInstance = RequestManagedCertListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","RequestManagedCertListInstance","RequestManagedCertInstance","RequestManagedCertContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","domainSid","isValidPathParam","Error","_solution","_uri","update","callback","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","toJSON","inspect","custom","_depth","options","domain_sid","dateUpdated","iso8601DateTime","date_updated","dateCreated","date_created","dateExpires","date_expires","domainName","domain_name","certificateSid","certificate_sid","url","managed","requesting","_proxy","_context","version","get","inspectImpl"],"sources":["D:/CHAT_BOT/chatbot_Frontend/node_modules/twilio/lib/rest/messaging/v1/requestManagedCert.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Messaging\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestManagedCertListInstance = exports.RequestManagedCertInstance = exports.RequestManagedCertContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass RequestManagedCertContextImpl {\n    constructor(_version, domainSid) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(domainSid)) {\n            throw new Error(\"Parameter 'domainSid' is not valid.\");\n        }\n        this._solution = { domainSid };\n        this._uri = `/LinkShortening/Domains/${domainSid}/RequestManagedCert`;\n    }\n    update(callback) {\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n        });\n        operationPromise = operationPromise.then((payload) => new RequestManagedCertInstance(operationVersion, payload, instance._solution.domainSid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.RequestManagedCertContextImpl = RequestManagedCertContextImpl;\nclass RequestManagedCertInstance {\n    constructor(_version, payload, domainSid) {\n        this._version = _version;\n        this.domainSid = payload.domain_sid;\n        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);\n        this.domainName = payload.domain_name;\n        this.certificateSid = payload.certificate_sid;\n        this.url = payload.url;\n        this.managed = payload.managed;\n        this.requesting = payload.requesting;\n        this._solution = { domainSid: domainSid || this.domainSid };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new RequestManagedCertContextImpl(this._version, this._solution.domainSid);\n        return this._context;\n    }\n    /**\n     * Update a RequestManagedCertInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed RequestManagedCertInstance\n     */\n    update(callback) {\n        return this._proxy.update(callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            domainSid: this.domainSid,\n            dateUpdated: this.dateUpdated,\n            dateCreated: this.dateCreated,\n            dateExpires: this.dateExpires,\n            domainName: this.domainName,\n            certificateSid: this.certificateSid,\n            url: this.url,\n            managed: this.managed,\n            requesting: this.requesting,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.RequestManagedCertInstance = RequestManagedCertInstance;\nfunction RequestManagedCertListInstance(version) {\n    const instance = ((domainSid) => instance.get(domainSid));\n    instance.get = function get(domainSid) {\n        return new RequestManagedCertContextImpl(version, domainSid);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.RequestManagedCertListInstance = RequestManagedCertListInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}